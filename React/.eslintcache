[{"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\index.js":"1","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\App.js":"2","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reportWebVitals.js":"3","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\index.js":"4","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\cartReducer.js":"5","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\searchReducer.js":"6","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\userReducer.js":"7","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\cartModalReducer.js":"8","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\showModalProductReducer.js":"9","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Home.js":"10","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Register.js":"11","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\UserActivate.js":"12","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ForgetPassword.js":"13","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Checkout.js":"14","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Login.js":"15","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\SubCategory.js":"16","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\PlaceOrder.js":"17","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ResetPassword.js":"18","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Search.js":"19","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ProductDetails.js":"20","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\Profile.js":"21","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\UpdatePassword.js":"22","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\PurchaseHistory.js":"23","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\ViewAllProducts.js":"24","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\Wishlist.js":"25","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\AdminDashboard.js":"26","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Cart.js":"27","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateCategory.js":"28","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateProduct.js":"29","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\Footer.js":"30","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\Header.js":"31","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\helper\\setBearerToken.js":"32","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\UpdateProduct.js":"33","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateSubCategory.js":"34","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\AdminRoute.js":"35","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\CartModal.js":"36","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\UserRoute.js":"37","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\auth.js":"38","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\cart.js":"39","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\helper\\getRefreshToken.js":"40","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\LoadingCard.js":"41","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\product.js":"42","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\ProductCard.js":"43","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\BestSellers.js":"44","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\user.js":"45","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\stripe.js":"46","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\StripeSetupIntent.js":"47","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\DisplayOrderSummary.js":"48","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\RedirectIfNotSignIn.js":"49","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\subCategory.js":"50","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\admin.js":"51","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\AdminSideBar.js":"52","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\category.js":"53","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\shipping.js":"54","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\order.js":"55","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\SearchQuery.js":"56","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\UserSideBar.js":"57","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\SearchSideBar.js":"58","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\CheckoutForm.js":"59","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\StripeSetupIntentAddCard.js":"60","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\NewlyAdded.js":"61"},{"size":1178,"mtime":1624804971026,"results":"62","hashOfConfig":"63"},{"size":7471,"mtime":1632577992623,"results":"64","hashOfConfig":"63"},{"size":375,"mtime":1616932704477,"results":"65","hashOfConfig":"63"},{"size":533,"mtime":1616932704476,"results":"66","hashOfConfig":"63"},{"size":1002,"mtime":1624464168085,"results":"67","hashOfConfig":"63"},{"size":387,"mtime":1616932704476,"results":"68","hashOfConfig":"63"},{"size":2038,"mtime":1616932704476,"results":"69","hashOfConfig":"63"},{"size":214,"mtime":1616932704475,"results":"70","hashOfConfig":"63"},{"size":281,"mtime":1616932704476,"results":"71","hashOfConfig":"63"},{"size":679,"mtime":1632590641060,"results":"72","hashOfConfig":"63"},{"size":3896,"mtime":1616932704469,"results":"73","hashOfConfig":"63"},{"size":7615,"mtime":1616932704470,"results":"74","hashOfConfig":"63"},{"size":3503,"mtime":1616932704467,"results":"75","hashOfConfig":"63"},{"size":25967,"mtime":1632641716823,"results":"76","hashOfConfig":"63"},{"size":9229,"mtime":1624463787278,"results":"77","hashOfConfig":"63"},{"size":5304,"mtime":1632578722035,"results":"78","hashOfConfig":"63"},{"size":1118,"mtime":1619279700066,"results":"79","hashOfConfig":"63"},{"size":6494,"mtime":1616932704469,"results":"80","hashOfConfig":"63"},{"size":5381,"mtime":1616932704469,"results":"81","hashOfConfig":"63"},{"size":12765,"mtime":1632579762353,"results":"82","hashOfConfig":"63"},{"size":3376,"mtime":1632642898736,"results":"83","hashOfConfig":"63"},{"size":9405,"mtime":1616932704475,"results":"84","hashOfConfig":"63"},{"size":9072,"mtime":1626014092970,"results":"85","hashOfConfig":"63"},{"size":7345,"mtime":1616932704473,"results":"86","hashOfConfig":"63"},{"size":396,"mtime":1616932704475,"results":"87","hashOfConfig":"63"},{"size":9275,"mtime":1626278671727,"results":"88","hashOfConfig":"63"},{"size":11768,"mtime":1632582569469,"results":"89","hashOfConfig":"63"},{"size":10425,"mtime":1616932704471,"results":"90","hashOfConfig":"63"},{"size":14283,"mtime":1616932704471,"results":"91","hashOfConfig":"63"},{"size":2088,"mtime":1632592661881,"results":"92","hashOfConfig":"63"},{"size":6805,"mtime":1632592958970,"results":"93","hashOfConfig":"63"},{"size":280,"mtime":1616932704465,"results":"94","hashOfConfig":"63"},{"size":18583,"mtime":1616932704473,"results":"95","hashOfConfig":"63"},{"size":12840,"mtime":1616932704473,"results":"96","hashOfConfig":"63"},{"size":2371,"mtime":1616932704460,"results":"97","hashOfConfig":"63"},{"size":2754,"mtime":1632582387765,"results":"98","hashOfConfig":"63"},{"size":403,"mtime":1616932704461,"results":"99","hashOfConfig":"63"},{"size":1782,"mtime":1616932704462,"results":"100","hashOfConfig":"63"},{"size":1372,"mtime":1624465330831,"results":"101","hashOfConfig":"63"},{"size":355,"mtime":1616932704465,"results":"102","hashOfConfig":"63"},{"size":625,"mtime":1616932704457,"results":"103","hashOfConfig":"63"},{"size":3140,"mtime":1616932704463,"results":"104","hashOfConfig":"63"},{"size":7975,"mtime":1632580069683,"results":"105","hashOfConfig":"63"},{"size":2189,"mtime":1632590471864,"results":"106","hashOfConfig":"63"},{"size":894,"mtime":1632639735694,"results":"107","hashOfConfig":"63"},{"size":891,"mtime":1624465578324,"results":"108","hashOfConfig":"63"},{"size":1451,"mtime":1632587816510,"results":"109","hashOfConfig":"63"},{"size":5103,"mtime":1632582912444,"results":"110","hashOfConfig":"63"},{"size":830,"mtime":1616932704461,"results":"111","hashOfConfig":"63"},{"size":992,"mtime":1616932704464,"results":"112","hashOfConfig":"63"},{"size":246,"mtime":1616932704462,"results":"113","hashOfConfig":"63"},{"size":927,"mtime":1616932704458,"results":"114","hashOfConfig":"63"},{"size":959,"mtime":1616932704463,"results":"115","hashOfConfig":"63"},{"size":167,"mtime":1619270184195,"results":"116","hashOfConfig":"63"},{"size":1424,"mtime":1626276785524,"results":"117","hashOfConfig":"63"},{"size":1160,"mtime":1626248517976,"results":"118","hashOfConfig":"63"},{"size":775,"mtime":1632592975798,"results":"119","hashOfConfig":"63"},{"size":4852,"mtime":1632581374498,"results":"120","hashOfConfig":"63"},{"size":5102,"mtime":1632586993350,"results":"121","hashOfConfig":"63"},{"size":4251,"mtime":1632587926042,"results":"122","hashOfConfig":"63"},{"size":2165,"mtime":1632590639033,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"11q31mn",{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"126"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"126"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"126"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"126"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"126"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"126"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"126"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"126"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"126"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"126"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"126"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"126"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"126"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"126"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"126"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"126"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"126"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"126"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"126"},"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\index.js",[],["278","279"],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\App.js",["280"],"import \"./App.css\";\r\n\r\n//toast\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport CartModal from \"./components/nav/CartModal\";\r\nimport Home from \"./pages/Home\";\r\nimport Register from \"./pages/Register\";\r\nimport UserActivate from \"./pages/UserActivate\";\r\nimport Login from \"./pages/Login\";\r\nimport ForgetPassword from \"./pages/ForgetPassword\";\r\nimport ResetPassword from \"./pages/ResetPassword\";\r\nimport PurchaseHistory from \"./pages/user/PurchaseHistory\";\r\nimport Profile from \"./pages/user/Profile\";\r\nimport UpdatePassword from \"./pages/user/UpdatePassword\";\r\nimport Wishlist from \"./pages/user/Wishlist\";\r\nimport Checkout from \"./pages/Checkout\";\r\nimport PlaceOrder from \"./pages/PlaceOrder\";\r\nimport SubCategory from \"./pages/SubCategory\";\r\n\r\nimport Cart from \"./pages/Cart\";\r\nimport Search from \"./pages/Search\";\r\n\r\nimport ProductDetails from \"./pages/ProductDetails\";\r\n\r\n//admin\r\nimport AdminDashboard from \"./pages/admin/AdminDashboard\";\r\nimport CreateCategory from \"./pages/admin/CreateCategory\";\r\nimport CreateSubCategory from \"./pages/admin/CreateSubCategory\";\r\nimport CreateProduct from \"./pages/admin/CreateProduct\";\r\nimport ViewAllProduct from \"./pages/admin/ViewAllProducts\";\r\nimport UpdateProduct from \"./pages/admin/UpdateProduct\";\r\n\r\nimport Header from \"./components/nav/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport UserRoute from \"./components/privateRoutes/UserRoute\";\r\nimport AdminRoute from \"./components/privateRoutes/AdminRoute\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport setBearerToken from \"./helper/setBearerToken\";\r\n// import {connect} from \"react-redux\";\r\n// import {getState,subscribe} from \"redux\";\r\n\r\n//functions\r\nimport { getUserCartOnLoginFn } from \"./functions/cart\";\r\nimport getRefreshToken from \"./helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"./functions/auth\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  console.log(\"app.js\");\r\n  //persist state when refresh was triggered\r\n  const userCheck = () => {\r\n    if (window !== \"undefined\") {\r\n      if (localStorage.getItem(\"token\") && localStorage.getItem(\"rfToken\")) {\r\n        const authToken = localStorage.getItem(\"token\");\r\n        const rfAuthToken = localStorage.getItem(\"rfToken\");\r\n        //set BearerToken\r\n        setBearerToken(authToken);\r\n        axios\r\n          .get(`${process.env.REACT_APP_SERVER_API}/user`)\r\n          .then((res) => {\r\n            dispatch({\r\n              type: \"LOGGED_IN_USER\",\r\n              payload: res.data,\r\n            });\r\n            getUserCart(authToken); // retrieve user cart\r\n          })\r\n          .catch((err) => {\r\n            //call refresh token\r\n            axios\r\n              .post(`${process.env.REACT_APP_SERVER_API}/refreshToken`, {\r\n                refreshToken: rfAuthToken,\r\n              })\r\n              .then((res) => {\r\n                dispatch({\r\n                  type: \"LOGGED_IN_USER\",\r\n                  payload: res.data,\r\n                });\r\n                getUserCart(authToken); // retrieve user cart\r\n              })\r\n              .catch((err) => {\r\n                dispatch({\r\n                  type: \"LOGGED_OUT_USER\",\r\n                }); //end dispatch\r\n              }); //end catch\r\n          }); //end catch refresh token\r\n      } //end token/rftoken exist\r\n      else {\r\n        dispatch({\r\n          type: \"LOGGED_OUT_USER\",\r\n        }); //end dispatch\r\n      }\r\n    } //end window undefined\r\n  };\r\n\r\n  const getUserCart = async (token) => {\r\n    try {\r\n      console.log(\"In getUserCart1\");\r\n      console.log(token);\r\n      const res = await getUserCartOnLoginFn(token);\r\n      console.log(\"In getUserCart2\");\r\n      console.log(res);\r\n      dispatch({\r\n        type: \"GET_CART_ONMOUNT\",\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await getUserCartOnLoginFn(res2.data.token);\r\n            //add to redux store for Cart, CartModal and showModalProductReducer\r\n            dispatch({\r\n              type: \"GET_CART_ONMOUNT\",\r\n              payload: res3.data,\r\n            });\r\n          } catch (err) {}\r\n        }\r\n      } else {\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"user useeffect\");\r\n    userCheck();\r\n  }, [dispatch]);\r\n\r\n  const DefaultContainer = () => {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <CartModal />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <Route exact path=\"/user/activate/:token\" component={UserActivate} />\r\n          <Route exact path=\"/user/forgetPassword\" component={ForgetPassword} />\r\n          <Route\r\n            exact\r\n            path=\"/user/password/reset/:token\"\r\n            component={ResetPassword}\r\n          />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/cart\" component={Cart} />\r\n          <Route exact path=\"/search\" component={Search} />\r\n          <Route exact path=\"/subcategory/:slug\" component={SubCategory} />\r\n          <Route\r\n            exact\r\n            path=\"/productDetails/:slug\"\r\n            component={ProductDetails}\r\n          />\r\n          <UserRoute\r\n            exact\r\n            path=\"/user/purchaseHistory\"\r\n            component={PurchaseHistory}\r\n          />\r\n          <UserRoute exact path=\"/user/profile\" component={Profile} />\r\n          <UserRoute\r\n            exact\r\n            path=\"/user/updatePassword\"\r\n            component={UpdatePassword}\r\n          />\r\n          <UserRoute exact path=\"/user/wishlist\" component={Wishlist} />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/dashboard\"\r\n            component={AdminDashboard}\r\n          />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/createCategory\"\r\n            component={CreateCategory}\r\n          />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/createSubCategory\"\r\n            component={CreateSubCategory}\r\n          />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/CreateProduct\"\r\n            component={CreateProduct}\r\n          />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/ViewAllProducts\"\r\n            component={ViewAllProduct}\r\n          />\r\n          <AdminRoute\r\n            exact\r\n            path=\"/admin/updateProduct/:slug\"\r\n            component={UpdateProduct}\r\n          />\r\n        </Switch>\r\n        <Footer />\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <BrowserRouter>\r\n        <ToastContainer />\r\n          <Switch>\r\n            <UserRoute exact path=\"/user/checkout\" component={Checkout} />\r\n            <UserRoute exact path=\"/user/PlaceOrder\" component={PlaceOrder} />\r\n            <Route component={DefaultContainer} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reportWebVitals.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\index.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\cartReducer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\searchReducer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\userReducer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\cartModalReducer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\reducers\\showModalProductReducer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Home.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Register.js",["281","282"],"import React, { useState, useEffect } from \"react\";\r\nimport { registerFn } from \"../functions/auth\";\r\nimport { useSelector } from \"react-redux\";\r\n// import {connect} from \"react-redux\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody, MDBAlert } from 'mdbreact';\r\nconst regexForEmail = /^[a-zA-Z0-9_]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/;\r\nconst Register = ({ history }) => {\r\n\r\n    const user = useSelector((state) => {\r\n        return state.user;\r\n    });\r\n\r\n    //redirect base on role\r\n    const roleBasedRedirect = user => {\r\n        console.log(\"roleBasedRedirect\", user);\r\n        if (user.role === \"admin\") {\r\n            history.push(\"/admin/dashboard\");\r\n        }\r\n        else if (user.role === \"normal\") {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    //Redirect if user logged in\r\n    useEffect(() => {\r\n        console.log(\"here1\", user.email);\r\n        if (user && user.email && user.token) {\r\n            //redirect to home\r\n            console.log(\"here2\");\r\n            roleBasedRedirect(user);\r\n        }\r\n    }, [user]);\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [validEmail, setValidEmail] = useState(false);\r\n\r\n\r\n    const registerFormEmail = () => {\r\n        return (\r\n\r\n            <MDBContainer className=\"p-5\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className=\"offset-md-3\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <form onSubmit={handleEmailSubmit}>\r\n                                    <p className=\"h4 text-center py-4\">Sign Up</p>\r\n                                    <MDBInput\r\n                                        label=\"Your Email\"\r\n                                        icon=\"envelope\"\r\n                                        group\r\n                                        type=\"email\"\r\n                                        value={email}\r\n                                        onChange={handleEmailChange}\r\n                                        autoFocus\r\n                                    />\r\n                                    {\r\n                                        email\r\n                                        && !validEmail\r\n                                        && (<MDBAlert color=\"danger\">Invalid Email Address</MDBAlert>)\r\n                                    }\r\n                                    <MDBBtn\r\n                                        type=\"submit\"\r\n                                        gradient=\"tempting-azure\" rounded block\r\n                                        disabled={!validEmail}>\r\n                                        Sign Up with Email\r\n                                    </MDBBtn>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n    const handleEmailChange = e => {\r\n        setEmail(e.target.value);\r\n        setValidEmail(regexForEmail.test(e.target.value));\r\n    }\r\n\r\n    const handleEmailSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await registerFn(email);\r\n            console.log(res);\r\n            setEmail(\"\");\r\n            window.alert(res.data.message);\r\n        } catch (err) {\r\n            window.alert(err.response.data.error);\r\n            if (err.response.status === 400) {\r\n                history.push(\"/user/forgetPassword\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const registerFormPhone = () => {\r\n\r\n    }\r\n    //Return Layout\r\n    return (\r\n        registerFormEmail()\r\n    )\r\n};\r\n\r\n\r\n// const mapStateToProps = state => {\r\n//     console.log(\"MAP STATE TO PROPS\",state);\r\n//     return {userExist:state.user}\r\n// }\r\n// export default connect(mapStateToProps,{})(Register);\r\n\r\nexport default Register;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\UserActivate.js",["283","284"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { activateAccountFn, activateAccountWithPasswordFn } from \"../functions/auth\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody, MDBAlert } from 'mdbreact';\r\n\r\nlet validationSet = new Set();\r\nlet validationArr = [];\r\nconst passwordRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,64})\");\r\n\r\nconst UserActivate = ({ match, history }) => {\r\n\r\n    const user = useSelector((state) => {\r\n        return state.user;\r\n    });\r\n\r\n    //redirect base on role\r\n    const roleBasedRedirect = user => {\r\n        if (user.role === \"admin\") {\r\n            history.push(\"/admin/dashboard\");\r\n        }\r\n        else if (user.role === \"normal\") {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [validations, setValidations] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n        password1: \"\",\r\n        password2: \"\"\r\n    });\r\n    const { name, password1, password2 } = formData;\r\n\r\n    //Redirect if user logged in\r\n    useEffect(() => {\r\n        console.log(\"here1\", user.email);\r\n        if (user && user.email && user.token) {\r\n            //redirect to home\r\n            roleBasedRedirect(user);\r\n        }\r\n    }, [user]);\r\n    const activateAccount = async (token) => {\r\n        try {\r\n            const res = await activateAccountFn(token);\r\n            if (res.status !== 204) {\r\n                window.alert(\"Registration Error please try again\");\r\n                history.push(\"/register\");\r\n            }\r\n        }\r\n        catch (err) {\r\n            window.alert(err.response.data.error);\r\n            history.push(\"/register\");\r\n        }\r\n    }\r\n    //if user fail to activate token within 15mins\r\n    useEffect(() => {\r\n        const token = match.params.token;\r\n        activateAccount(token);\r\n    }, []);\r\n\r\n    const handleChange = text => e => {\r\n        setFormData({ ...formData, [text]: e.target.value });\r\n\r\n        if (text === \"name\") {\r\n            if (e.target.value.length < 2 || e.target.value.length > 64) {\r\n                validationSet.add(\"Name must be between 2 to 64 characters\");\r\n            } else {\r\n                validationSet.delete(\"Name must be between 2 to 64 characters\");\r\n            }\r\n        }\r\n\r\n        if (text === \"password1\") {\r\n            if (!passwordRegex.test(e.target.value)) {\r\n                validationSet.add(\"Password must be 8 to 64 characters, contain 1 upper, 1 lower, 1 numberic and a special character\");\r\n\r\n            } else {\r\n                validationSet.delete(\"Password must be 8 to 64 characters, contain 1 upper, 1 lower, 1 numberic and a special character\");\r\n            }\r\n            if (e.target.value !== password2) {\r\n                validationSet.add(\"Password and confirm Password don't match\");\r\n            } else {\r\n                validationSet.delete(\"Password and confirm Password don't match\");\r\n            }\r\n        }\r\n\r\n        if (text === \"password2\") {\r\n            if (e.target.value !== password1) {\r\n                validationSet.add(\"Password and confirm Password don't match\");\r\n            } else {\r\n                validationSet.delete(\"Password and confirm Password don't match\");\r\n            }\r\n        }\r\n\r\n        validationArr = [...validationSet];\r\n        setValidations(validationArr);\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        if (password1 === password2) {\r\n            try {\r\n                const res = await activateAccountWithPasswordFn(match.params.token, name, password1);\r\n                //clear form data\r\n                setFormData({\r\n                    name: \"\",\r\n                    password1: \"\",\r\n                    password2: \"\"\r\n                });\r\n                //update redux\r\n                dispatch({\r\n                    type: \"LOGGED_IN_USER\",\r\n                    payload: res.data\r\n                });\r\n\r\n                //redirect\r\n                roleBasedRedirect(res.data);\r\n\r\n            } catch (err) {\r\n                window.alert(err.response.data.error);\r\n                history.push(\"/register\");\r\n            }\r\n        }\r\n        else {\r\n            window.alert(\"Registration Error please try again\");\r\n            setFormData({\r\n                ...formData,\r\n                password1: \"\",\r\n                password2: \"\"\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n    \r\n    const registerWithPassword = () => {\r\n        return (\r\n            <MDBContainer className=\"p-5\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className=\"offset-md-3\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <form onSubmit={handleSubmit}>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            label=\"Your Name\"\r\n                                            icon=\"user\"\r\n                                            group\r\n                                            type=\"text\"\r\n                                            value={name}\r\n                                            onChange={handleChange(\"name\")}\r\n                                            autoFocus\r\n                                        />\r\n                                        <MDBInput\r\n                                            label=\"Password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"password\"\r\n                                            value={password1}\r\n                                            onChange={handleChange(\"password1\")}\r\n                                        />\r\n                                        <MDBInput\r\n                                            label=\"Confirm Password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"password\"\r\n                                            value={password2}\r\n                                            onChange={handleChange(\"password2\")}\r\n                                        />\r\n                                    </div>\r\n                                    {validations && validations.length > 0 && validations.map((v, i) => {\r\n                                        return <MDBAlert key={i} className=\"list-group-item list-group-item-danger p-2 m-1\">{v}</MDBAlert>\r\n                                    })}\r\n                                    <div className=\"text-center py-2\">\r\n                                        <MDBBtn\r\n                                            type=\"submit\"\r\n                                            gradient=\"tempting-azure\" rounded block\r\n                                            disabled={!(name && password1 && password2 && validations.length === 0)}>\r\n                                            Complete Registration\r\n                                            </MDBBtn>\r\n                                    </div>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n\r\n    //Return Layout\r\n    return (\r\n        registerWithPassword()\r\n    )\r\n}\r\n\r\nexport default UserActivate;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ForgetPassword.js",["285"],"import React, { useState, useEffect } from \"react\";\r\nimport { forgetPasswordFn } from \"../functions/auth\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody, MDBAlert } from 'mdbreact';\r\nconst regexForEmail = /^[a-zA-Z0-9_]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/;\r\nconst ForgetPassword = ({ history }) => {\r\n\r\n    const user = useSelector(state => {\r\n        return state.user;\r\n    });\r\n\r\n    //Redirect if user logged in\r\n    useEffect(() => {\r\n        console.log(\"here1\", user.email);\r\n        if (user && user.email && user.token) {\r\n            //redirect to home\r\n            console.log(\"here2\");\r\n            history.push(\"/\");\r\n        }\r\n    }, [user]);\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [validEmail, setValidEmail] = useState(false);\r\n\r\n    const forgetPasswordForm = () => {\r\n        return (\r\n            <MDBContainer className=\"p-5\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className=\"offset-md-3\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <form onSubmit={handleSubmit}>\r\n                                    <p className=\"h4 text-center py-4\">Forget Password</p>\r\n                                    <MDBInput\r\n                                        label=\"Your Email\"\r\n                                        icon=\"envelope\"\r\n                                        group\r\n                                        type=\"email\"\r\n                                        value={email}\r\n                                        onChange={handleEmailChange}\r\n                                        autoFocus\r\n                                    />\r\n                                    {\r\n                                        email\r\n                                        && !validEmail\r\n                                        && (<MDBAlert color=\"danger\">Invalid Email Address</MDBAlert>)\r\n                                    }\r\n                                    <MDBBtn\r\n                                        type=\"submit\"\r\n                                        gradient=\"tempting-azure\" rounded block\r\n                                        disabled={!(validEmail && email.length > 0)}>\r\n                                        Forget Password\r\n                                    </MDBBtn>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n\r\n\r\n        )\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await forgetPasswordFn(email);\r\n            setEmail(\"\");\r\n            window.alert(res.data.message);\r\n        } catch (err) {\r\n            setEmail(\"\");\r\n            window.alert(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    const handleEmailChange = e => {\r\n        setEmail(e.target.value);\r\n        setValidEmail(regexForEmail.test(e.target.value));\r\n    }\r\n\r\n    return (\r\n        forgetPasswordForm()\r\n        // <div className=\"container p-5\">\r\n        //     <div className=\"row\">\r\n        //         <div className=\"col-md-6 offset-md-3\">\r\n        //             <h4>Forget Password</h4>\r\n        //             {forgetPasswordForm()}\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default ForgetPassword;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Checkout.js",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getUserCartOnCheckoutFn } from \"../functions/cart\";\r\nimport { getUserInfoFn, updateUserInfoFn } from \"../functions/user\";\r\nimport {\r\n  createPaymentIntentFn,\r\n  getPaymentMethodFn,\r\n  addPaymentMethodFn,\r\n  deletePaymentMethodFn,\r\n} from \"../functions/stripe\";\r\nimport { useStripe } from \"@stripe/react-stripe-js\";\r\n\r\nimport { Image, Modal, Button } from \"antd\";\r\nimport { MDBInput } from \"mdbreact\";\r\nimport getRefreshToken from \"../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../functions/auth\";\r\nimport DisplayOrderSummary from \"../components/DisplayOrderSummary\";\r\n//Stripe\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport StripeSetupIntent from \"../components/StripeSetupIntent\";\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\n// Make sure to call loadStripe outside of a component’s render to avoid\r\n// recreating the Stripe object on every render.\r\n// loadStripe is initialized with your real test publishable API key.\r\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\r\n\r\nconst Checkout = () => {\r\n  //initiate stripe\r\n  // const stripe = useStripe();\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n\r\n  const initialCartState = {\r\n    products: [],\r\n    discountedPrice: 0,\r\n    totalPriceBeforeDiscount: 0,\r\n    totalPriceAfterDiscount: 0,\r\n    promoCode: \"\",\r\n  };\r\n  const initialUserState = {\r\n    name: \"\",\r\n    addresses: [],\r\n  };\r\n  const [cart, setCart] = useState(initialCartState);\r\n  const {\r\n    products,\r\n    totalPriceBeforeDiscount,\r\n    totalPriceAfterDiscount,\r\n    discountedPrice,\r\n    promoCode,\r\n  } = cart;\r\n\r\n  const [dbuser, setDBUser] = useState(initialUserState);\r\n  const { name, addresses } = dbuser;\r\n\r\n  const [chosenAddress, setChosenAddress] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const [isUpdateModalVisible, setIsUpdateModalVisible] = useState(false);\r\n\r\n  const [addressForm, setAddressForm] = useState({\r\n    buildingOrStreet: \"\",\r\n    unitNo: \"\",\r\n    country: \"Singapore\",\r\n    city: \"SG\",\r\n    postalCode: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const { buildingOrStreet, unitNo, country, city, postalCode, contactNumber } =\r\n    addressForm;\r\n\r\n  const [updateAddressForm, setUpdateAddressForm] = useState({\r\n    buildingOrStreet: \"\",\r\n    unitNo: \"\",\r\n    country: \"Singapore\",\r\n    city: \"SG\",\r\n    postalCode: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n  const [addModalError, setAddModalError] = useState(\"\");\r\n  const [editModalError, setEditModalError] = useState(\"\");\r\n\r\n  const [paymentMethods, setPaymentMethods] = useState([]);\r\n  const [chosenPaymentMethod, setChosenPaymentMethod] = useState(\"\");\r\n\r\n  const [isAddNewCardModalVisible, setIsAddNewCardModalVisible] =\r\n    useState(false);\r\n  const [clientSecretForPaymentMethod, setclientSecretForPaymentMethod] =\r\n    useState(\"\");\r\n  const [clientSecretForPaymentIntent, setclientSecretForPaymentIntent] =\r\n    useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const getUserCartOnCheckout = async () => {\r\n    try {\r\n      const res = await getUserCartOnCheckoutFn(user.token);\r\n      setCart(res.data);\r\n    } catch (err) {\r\n      //todo display error\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            const res3 = await getUserCartOnCheckoutFn(res2.data.token);\r\n            setCart(res3.data);\r\n          } catch (err) {\r\n            //todo display error\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getUserInfo = async (address_id) => {\r\n    try {\r\n      const res = await getUserInfoFn(user.token);\r\n      setDBUser((prevData) => ({\r\n        ...prevData,\r\n        name: res.data.name,\r\n        addresses: res.data.addresses,\r\n      }));\r\n      //if not a add/update/delete of address automatically select the latest address\r\n      if (!address_id) {\r\n        console.log(res.data.addresses);\r\n        if (res.data && res.data.addresses && res.data.addresses.length > 0) {\r\n          setChosenAddress(\r\n            res.data.addresses[res.data.addresses.length - 1]._id\r\n          );\r\n        } else {\r\n          setChosenAddress(\"\");\r\n        }\r\n      }\r\n    } catch (err) {\r\n      //todo display error\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            const res3 = await getUserInfoFn(res2.data.token);\r\n            setDBUser((prevData) => ({\r\n              ...prevData,\r\n              name: res3.data.name,\r\n              addresses: res3.data.addresses,\r\n            }));\r\n            //if not a add/update/delete of address automatically select the latest address\r\n            if (!address_id) {\r\n              console.log(res3.data.addresses);\r\n              if (\r\n                res3.data &&\r\n                res3.data.addresses &&\r\n                res3.data.addresses.length > 0\r\n              ) {\r\n                setChosenAddress(\r\n                  res3.data.addresses[res3.data.addresses.length - 1]._id\r\n                );\r\n              } else {\r\n                setChosenAddress(\"\");\r\n              }\r\n            }\r\n          } catch (err) {\r\n            //todo display error\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPaymentMethod = async () => {\r\n    try {\r\n      const res = await getPaymentMethodFn(user.token);\r\n      if (res.status === 200) {\r\n        const pms = res.data;\r\n        setPaymentMethods(pms);\r\n        setChosenPaymentMethod(pms[pms.length - 1].id);\r\n      } else if (res.status === 204) {\r\n        setPaymentMethods([]);\r\n        setChosenPaymentMethod(\"\");\r\n      }\r\n    } catch (err) {\r\n      //todo display error\r\n      const rfAuthToken = getRefreshToken();\r\n      if (rfAuthToken) {\r\n        try {\r\n          const res2 = await refreshTokenFn(rfAuthToken);\r\n          const res3 = await getUserInfoFn(res2.data.token);\r\n          if (res3.status === 200) {\r\n            setPaymentMethods(res3.data);\r\n          } else if (res3.status === 204) {\r\n            setPaymentMethods([]);\r\n            setChosenPaymentMethod(\"\");\r\n          }\r\n        } catch (err) {\r\n          //todo display error\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const addPaymentMethod = async () => {\r\n    try {\r\n      const res = await addPaymentMethodFn(user.token);\r\n      console.log(res.data);\r\n      setclientSecretForPaymentMethod(res.data.clientSecret);\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            const res3 = await addPaymentMethodFn(res2.data.token);\r\n            setclientSecretForPaymentMethod(\r\n              res3.data.clientSecret\r\n            );\r\n          } catch (err) {\r\n            //setError(err.response.data.error);\r\n          }\r\n        }\r\n      } else {\r\n        //setError(err.response.data.error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserCartOnCheckout();\r\n  }, []);\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getPaymentMethod();\r\n  }, []);\r\n\r\n  const displayCartItemHeader = () => {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-md-6 font-weight-bold\">Products</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Price</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Quantity</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Total Price:</div>\r\n        </div>\r\n        <hr />\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const displayShippingDetails = () => {\r\n    return (\r\n      <Fragment>\r\n        <div>\r\n          <h5>Delivery Address</h5>\r\n          {addresses && addresses.length > 0 ? (\r\n            addresses.map((address) => {\r\n              return (\r\n                <div\r\n                  key={address._id}\r\n                  className={\r\n                    address._id === chosenAddress ? \"activeDiv\" : \"inactiveDiv\"\r\n                  }\r\n                  style={{ marginBottom: \"4px\" }}\r\n                >\r\n                  <div\r\n                    className=\"p-2\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      setChosenAddress(address._id);\r\n                      setUpdateAddressForm(address);\r\n                    }}\r\n                  >\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-8\">\r\n                        <div>\r\n                          {address.buildingOrStreet} | {address.unitNo}\r\n                        </div>\r\n                        <div>\r\n                          {address.country}, {address.postalCode}\r\n                        </div>\r\n                        <div>\r\n                          {address.city} | {address.contactNumber}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-4 mt-auto mb-auto\">\r\n                        <div className=\"row pt-3\">\r\n                          <div className=\"col-md-4\">\r\n                            <Button\r\n                              type=\"primary\"\r\n                              onClick={() => handleEditAddress()}\r\n                            >\r\n                              Edit\r\n                            </Button>\r\n                          </div>\r\n                          <div className=\"col-md-4\">\r\n                            <Button\r\n                              type=\"danger\"\r\n                              onClick={() => handleDeleteAddress(address._id)}\r\n                            >\r\n                              Delete\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <h6 className=\"text-danger\">You need to add an address</h6>\r\n          )}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const handleEditAddress = () => {\r\n    //display modal\r\n    setIsUpdateModalVisible(true);\r\n  };\r\n  const handleAddAddress = async (e) => {\r\n    e.preventDefault();\r\n    const updatedUserInfo = {};\r\n    //For Add New Address\r\n    //Send all address to server.\r\n    updatedUserInfo.addresses = addresses;\r\n    updatedUserInfo.addresses.push(addressForm);\r\n\r\n    try {\r\n      const res = await updateUserInfoFn(updatedUserInfo, user.token);\r\n      //clear modal\r\n      setIsModalVisible(false);\r\n      //render delivery address, pass in addressForm._id if addressForm._id to check if it is a update or add record, if update, do not need to set state the chosen address to last\r\n      getUserInfo(addressForm._id);\r\n      //clear state\r\n      setAddressForm({\r\n        buildingOrStreet: \"\",\r\n        unitNo: \"\",\r\n        country: \"Singapore\",\r\n        city: \"SG\",\r\n        postalCode: \"\",\r\n        contactNumber: \"\",\r\n      });\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await updateUserInfoFn(\r\n              updatedUserInfo,\r\n              res2.data.token\r\n            );\r\n            //clear modal\r\n            setIsModalVisible(false);\r\n            //render delivery address\r\n            getUserInfo(addressForm._id);\r\n            //clear state\r\n            setAddressForm({\r\n              buildingOrStreet: \"\",\r\n              unitNo: \"\",\r\n              country: \"Singapore\",\r\n              city: \"SG\",\r\n              postalCode: \"\",\r\n              contactNumber: \"\",\r\n            });\r\n          } catch (err) {}\r\n        } else {\r\n          //fail not because of auth token\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const handleUpdateAddress = async (e) => {\r\n    e.preventDefault();\r\n    //For Update Existing Address AddressForm._id will be in the state\r\n    const updatedUserInfo = {};\r\n    const updatedAddress = addresses.map((a) => {\r\n      if (a._id === updateAddressForm._id) {\r\n        a = updateAddressForm;\r\n      }\r\n      return a;\r\n    });\r\n    updatedUserInfo.addresses = updatedAddress;\r\n\r\n    try {\r\n      const res = await updateUserInfoFn(updatedUserInfo, user.token);\r\n      //clear modal\r\n      setIsUpdateModalVisible(false);\r\n      //render delivery address, pass in addressForm._id if addressForm._id to check if it is a update or add record, if update, do not need to set state the chosen address to last\r\n      getUserInfo(updateAddressForm._id);\r\n      //clear state\r\n      setUpdateAddressForm({\r\n        buildingOrStreet: \"\",\r\n        unitNo: \"\",\r\n        country: \"Singapore\",\r\n        city: \"SG\",\r\n        postalCode: \"\",\r\n        contactNumber: \"\",\r\n      });\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await updateUserInfoFn(\r\n              updatedUserInfo,\r\n              res2.data.token\r\n            );\r\n            //clear modal\r\n            setIsUpdateModalVisible(false);\r\n            //render delivery address\r\n            getUserInfo(addressForm._id);\r\n            //clear state\r\n            setUpdateAddressForm({\r\n              buildingOrStreet: \"\",\r\n              unitNo: \"\",\r\n              country: \"Singapore\",\r\n              city: \"SG\",\r\n              postalCode: \"\",\r\n              contactNumber: \"\",\r\n            });\r\n          } catch (err) {}\r\n        } else {\r\n          //fail not because of auth token\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const handleDeleteAddress = async (address_id) => {\r\n    let counNumberOfAddressDeleted = 0;\r\n    console.log(\"init length\");\r\n    console.log(addresses.length);\r\n    const addressAfterDelete = addresses.filter((a) => {\r\n      if (a._id !== address_id) {\r\n        return a._id;\r\n      } else {\r\n        counNumberOfAddressDeleted++;\r\n      }\r\n    });\r\n    console.log(addressAfterDelete);\r\n    console.log(counNumberOfAddressDeleted);\r\n    console.log(\"after length\");\r\n    console.log(addressAfterDelete.length);\r\n    if (counNumberOfAddressDeleted === 1) {\r\n      try {\r\n        const updatedUserInfo = {};\r\n        updatedUserInfo.addresses = addressAfterDelete;\r\n        console.log(\"call api here\");\r\n        const res = await updateUserInfoFn(updatedUserInfo, user.token);\r\n        getUserInfo();\r\n      } catch (err) {}\r\n    } else {\r\n      //got issue\r\n      //\r\n    }\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n  const handleCancelForUpdate = () => {\r\n    setIsUpdateModalVisible(false);\r\n  };\r\n  const displayCartItemContent = () => {\r\n    return products.map((c) => {\r\n      return (\r\n        <div key={c._id}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <Link to={`../productDetails/${c.product.slug}`}>\r\n                    <Image\r\n                      src={`${process.env.REACT_APP_AWSS3DIR}/${c.product.images[0]}`}\r\n                      preview={false}\r\n                      width={100}\r\n                    />\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                  <div className=\"font-weight-bold\">{c.product.name}</div>\r\n                  <div>{c.product.description}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-2\">SGD${c.product.price.toFixed(2)}</div>\r\n            <div className=\"col-md-2\">\r\n              {c.purchaseQuantity}\r\n              <br />\r\n            </div>\r\n            <div className=\"col-md-2\">SGD${c.totalPriceWithQuantity.toFixed(2)}</div>\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const displayUpdateAddressModal = () => {\r\n    return (\r\n      <Modal\r\n        title=\"Update Address\"\r\n        visible={isUpdateModalVisible}\r\n        onOk={editModalError === \"\" && handleUpdateAddress}\r\n        onCancel={handleCancelForUpdate}\r\n      >\r\n        <MDBInput\r\n          label=\"Building Or Street\"\r\n          group\r\n          type=\"text\"\r\n          value={updateAddressForm.buildingOrStreet}\r\n          onChange={handleUpdateAddressChange(\"buildingOrStreet\")}\r\n          autoFocus\r\n        />\r\n        <MDBInput\r\n          label=\"Unit No\"\r\n          group\r\n          type=\"text\"\r\n          value={updateAddressForm.unitNo}\r\n          onChange={handleUpdateAddressChange(\"unitNo\")}\r\n        />\r\n        <MDBInput\r\n          label=\"Country\"\r\n          group\r\n          type=\"text\"\r\n          value={updateAddressForm.country}\r\n          disabled={true}\r\n        />\r\n        <MDBInput\r\n          label=\"City\"\r\n          group\r\n          type=\"text\"\r\n          value={updateAddressForm.city}\r\n          disabled={true}\r\n        />\r\n        <MDBInput\r\n          label=\"Postal Code\"\r\n          group\r\n          type=\"number\"\r\n          value={updateAddressForm.postalCode}\r\n          onChange={handleUpdateAddressChange(\"postalCode\")}\r\n        />\r\n        <div className=\"text-danger\">{editModalError}</div>\r\n        <MDBInput\r\n          label=\"Contact Number\"\r\n          group\r\n          type=\"number\"\r\n          value={updateAddressForm.contactNumber}\r\n          onChange={handleUpdateAddressChange(\"contactNumber\")}\r\n        />\r\n      </Modal>\r\n    );\r\n  };\r\n  const handleUpdateAddressChange = (key) => (e) => {\r\n    if (key === \"postalCode\") {\r\n      console.log(e.target.value);\r\n      if (e.target.value.length < 6) {\r\n        setEditModalError(\"PostalCode Must be 6 character\");\r\n        setUpdateAddressForm({ ...updateAddressForm, [key]: e.target.value });\r\n      } else if (e.target.value.length === 6) {\r\n        setUpdateAddressForm({ ...updateAddressForm, [key]: e.target.value });\r\n        setEditModalError(\"\");\r\n      }\r\n    } else {\r\n      setUpdateAddressForm({ ...updateAddressForm, [key]: e.target.value });\r\n    }\r\n  };\r\n\r\n  const displayAddressModal = () => {\r\n    return (\r\n      <Modal\r\n        title=\"Add New Address\"\r\n        visible={isModalVisible}\r\n        onOk={addModalError === \"\" && handleAddAddress}\r\n        onCancel={handleCancel}\r\n      >\r\n        <MDBInput\r\n          label=\"Building Or Street\"\r\n          group\r\n          type=\"text\"\r\n          value={buildingOrStreet}\r\n          onChange={handleAddAddressChange(\"buildingOrStreet\")}\r\n          autoFocus\r\n        />\r\n        <MDBInput\r\n          label=\"Unit No\"\r\n          group\r\n          type=\"text\"\r\n          value={unitNo}\r\n          onChange={handleAddAddressChange(\"unitNo\")}\r\n        />\r\n        <MDBInput\r\n          label=\"Country\"\r\n          group\r\n          type=\"text\"\r\n          value={country}\r\n          disabled={true}\r\n        />\r\n        <MDBInput label=\"City\" group type=\"text\" value={city} disabled={true} />\r\n        <MDBInput\r\n          label=\"Postal Code\"\r\n          group\r\n          type=\"number\"\r\n          min=\"6\"\r\n          max=\"6\"\r\n          value={postalCode}\r\n          onChange={handleAddAddressChange(\"postalCode\")}\r\n        />\r\n        <div className=\"text-danger\">{addModalError}</div>\r\n        <MDBInput\r\n          label=\"Contact Number\"\r\n          group\r\n          type=\"text\"\r\n          value={contactNumber}\r\n          onChange={handleAddAddressChange(\"contactNumber\")}\r\n        />\r\n      </Modal>\r\n    );\r\n  };\r\n  const handleAddAddressChange = (key) => (e) => {\r\n    if (key === \"postalCode\") {\r\n      console.log(e.target.value);\r\n      if (e.target.value.length < 6) {\r\n        setAddModalError(\"PostalCode Must be 6 character\");\r\n        setAddressForm({ ...addressForm, [key]: e.target.value });\r\n      } else if (e.target.value.length === 6) {\r\n        setAddModalError(\"\");\r\n        setAddressForm({ ...addressForm, [key]: e.target.value });\r\n      }\r\n    } else {\r\n      setAddressForm({ ...addressForm, [key]: e.target.value });\r\n    }\r\n  };\r\n\r\n  const addDeliveryAddress = () => {\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-link border\"\r\n          onClick={() => setIsModalVisible(true)}\r\n        >\r\n          Add New Address\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleRemovePaymentMethod = async (paymentMethodID) => {\r\n    try {\r\n      await deletePaymentMethodFn(user.token, paymentMethodID);\r\n      getPaymentMethod();\r\n    } catch (err) {\r\n      //todo display error\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            await deletePaymentMethodFn(res2.data.token, paymentMethodID);\r\n            getPaymentMethod();\r\n          } catch (err) {\r\n            //todo display error\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const displayPaymentMethod = () => {\r\n    return (\r\n      <Fragment>\r\n        <div>\r\n          <h5>Payment Method</h5>\r\n          {paymentMethods && paymentMethods.length > 0\r\n            ? paymentMethods.map((pm) => {\r\n                return (\r\n                  <div\r\n                    key={pm.id}\r\n                    className={\r\n                      pm.id === chosenPaymentMethod\r\n                        ? \"activeDiv\"\r\n                        : \"inactiveDiv\"\r\n                    }\r\n                    style={{ marginBottom: \"4px\" }}\r\n                  >\r\n                    <div\r\n                      className=\"p-2\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => {\r\n                        setChosenPaymentMethod(pm.id);\r\n                      }}\r\n                    >\r\n                      <div className=\"row\">\r\n                        <div className=\"col-md-8\">\r\n                          {pm.card.brand} | expire on : {pm.card.exp_month}/\r\n                          {pm.card.exp_year} | last 4 digits : {pm.card.last4}\r\n                        </div>\r\n                        <div className=\"col-md-4 mt-auto mb-auto\">\r\n                          <Button\r\n                            type=\"link\"\r\n                            block\r\n                            className=\"text-danger\"\r\n                            onClick={() => handleRemovePaymentMethod(pm.id)}\r\n                          >\r\n                            Remove\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const addNewCard = () => {\r\n    return (\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-link border\"\r\n          onClick={() => {\r\n            addPaymentMethod();\r\n            setIsAddNewCardModalVisible(true);\r\n          }}\r\n        >\r\n          Add New Card\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleCancelForAddCard = () => {\r\n    setIsAddNewCardModalVisible(false);\r\n    getPaymentMethod();\r\n  };\r\n\r\n  const displayNewCardModal = () => {\r\n    console.log(\"in displayNewCardModal\");\r\n    return (\r\n      <Modal\r\n        footer={null}\r\n        title=\"Add New Card\"\r\n        visible={isAddNewCardModalVisible}\r\n        // onOk={editModalError === \"\" && handleUpdateAddress}\r\n        onCancel={handleCancelForAddCard}\r\n      >\r\n        <StripeSetupIntent\r\n          handleCancelForAddCard={handleCancelForAddCard}\r\n          isAddNewCardModalVisible={isAddNewCardModalVisible}\r\n          clientSecretForPaymentMethod={clientSecretForPaymentMethod}\r\n        />\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {displayAddressModal()}\r\n      <h3>Review Your Order</h3>\r\n      <hr />\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8\">\r\n          {/* {JSON.stringify(chosenAddress)}\r\n          {JSON.stringify(chosenPaymentMethod)}\r\n          {JSON.stringify(clientSecretForPaymentMethod)} */}\r\n          {/* {JSON.stringify(chosenPaymentMethod)} */}\r\n          {displayShippingDetails()}\r\n          {displayUpdateAddressModal()}\r\n          {addDeliveryAddress()}\r\n          <hr />\r\n          {displayPaymentMethod()}\r\n          {addNewCard()}\r\n          {displayNewCardModal()}\r\n          <hr />\r\n          {displayCartItemHeader()}\r\n          {displayCartItemContent()}\r\n        </div>\r\n        {/* <div className=\"col-md-4\">{displayOrderSummary()}</div> */}\r\n        <div className=\"col-md-4\">\r\n          <Elements stripe={promise}>\r\n            <DisplayOrderSummary\r\n              promoCode={promoCode}\r\n              totalPriceBeforeDiscount={totalPriceBeforeDiscount}\r\n              discountedPrice={discountedPrice}\r\n              user={user}\r\n              cart={cart}\r\n              chosenAddress={chosenAddress}\r\n              chosenPaymentMethod={chosenPaymentMethod}\r\n              totalPriceAfterDiscount={totalPriceAfterDiscount}\r\n            />\r\n          </Elements>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Login.js",["302"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginFn, googleLoginFn, facebookLoginFn } from \"../functions/auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport { addCartBeforeLoginFn, getUserCartOnLoginFn } from \"../functions/cart\";\r\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput,\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBAlert,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nconst regexForEmail = /^[a-zA-Z0-9_]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/;\r\nconst passwordRegex = new RegExp(\r\n  \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,64})\"\r\n);\r\n\r\nconst Login = ({ history }) => {\r\n  const { user, cart } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n  console.log(\"asd1\");\r\n  console.log(history.location.state);\r\n  //redirect base on role\r\n  const roleBasedRedirect = (user) => {\r\n    if (history.location.state && history.location.state.redirectedFrom) {\r\n      history.push(history.location.state.redirectedFrom);\r\n    } else {\r\n      console.log(\"here2\");\r\n      if (user.role === \"admin\") {\r\n        history.push(\"/admin/dashboard\");\r\n      } else if (user.role === \"normal\") {\r\n        history.push(\"/\");\r\n      }\r\n    }\r\n  };\r\n  const addCartBeforeLogin = async (token) => {\r\n    if (cart && cart.length > 0) {\r\n      //cart is not empty\r\n      try {\r\n        const res = await addCartBeforeLoginFn(cart, token);\r\n        dispatch({\r\n          type: \"UPDATE_CART_ONLOGIN\",\r\n          payload: res.data,\r\n        });\r\n        //empty local storage cart\r\n        if (typeof window !== \"undefined\") {\r\n          console.log(\"here\");\r\n          localStorage.removeItem(\"cart\");\r\n        }\r\n      } catch (err) {\r\n        //this function run async No need catch, token is pass on login will unlikely it will have expire condition\r\n      }\r\n    } else {\r\n      //cart is empty no need execute\r\n      return getUserCartOnLogin(token);\r\n    }\r\n  };\r\n\r\n  const getUserCartOnLogin = async (token) => {\r\n    try {\r\n      const res = await getUserCartOnLoginFn(token);\r\n      dispatch({\r\n        type: \"GET_CART_ONLOGIN\",\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      //this function run async No need catch, token is pass on login will unlikely it will have expire condition\r\n    }\r\n  };\r\n\r\n  //Redirect if user logged in\r\n  useEffect(() => {\r\n    //this will stop useEffect for running twice.\r\n    if (history.location.state) {\r\n      return;\r\n    } else {\r\n      if (user && user.email && user.token) {\r\n        //redirect\r\n        roleBasedRedirect(user);\r\n      }\r\n    }\r\n    // return () => {\r\n\r\n    // }\r\n  }, [user]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [validEmail, setValidEmail] = useState(false);\r\n  const [validPassword, setValidPassword] = useState(false);\r\n  const [loginError, setLoginError] = useState(\"\");\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { email, password } = formData;\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await loginFn(email, password);\r\n      //clear form data\r\n      setFormData({\r\n        email: \"\",\r\n        password: \"\",\r\n      });\r\n      //dispatch\r\n      dispatch({\r\n        type: \"LOGGED_IN_USER\",\r\n        payload: res.data,\r\n      });\r\n      addCartBeforeLogin(res.data.token);\r\n      //redirect\r\n      roleBasedRedirect(res.data);\r\n    } catch (err) {\r\n      //clear password\r\n      setFormData({\r\n        ...formData,\r\n        password: \"\",\r\n      });\r\n\r\n      setLoginError(err.response.data.error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (text) => (e) => {\r\n    setFormData({ ...formData, [text]: e.target.value });\r\n\r\n    if (text === \"email\") {\r\n      setValidEmail(regexForEmail.test(e.target.value));\r\n    } else if (text === \"password\") {\r\n      setValidPassword(passwordRegex.test(e.target.value));\r\n    }\r\n  };\r\n\r\n  const responseGoogle = async (response) => {\r\n    try {\r\n      const res = await googleLoginFn(response.tokenId);\r\n\r\n      //dispatch\r\n      dispatch({\r\n        type: \"LOGGED_IN_USER\",\r\n        payload: res.data,\r\n      });\r\n      console.log(res.data);\r\n      addCartBeforeLogin(res.data.token);\r\n      //redirect\r\n      roleBasedRedirect(res.data);\r\n    } catch (err) {\r\n      setLoginError(err.response.data.error);\r\n    }\r\n  };\r\n\r\n  const responseFacebook = async (response) => {\r\n    try {\r\n      const res = await facebookLoginFn(response.userID, response.accessToken);\r\n      //dispatch\r\n      dispatch({\r\n        type: \"LOGGED_IN_USER\",\r\n        payload: res.data,\r\n      });\r\n      addCartBeforeLogin(res.data.token);\r\n      //redirect\r\n      roleBasedRedirect(res.data);\r\n    } catch (err) {\r\n      setLoginError(err.response.data.error);\r\n    }\r\n  };\r\n\r\n  const mdBootStrapLogin = () => {\r\n    return (\r\n      <MDBContainer className=\"p-5\">\r\n        <MDBRow>\r\n          <MDBCol md=\"6\" className=\"offset-md-3\">\r\n            <MDBCard>\r\n              <MDBCardBody>\r\n                <form onSubmit={handleSubmit}>\r\n                  <p className=\"h4 text-center py-4\">Sign In</p>\r\n                  <div className=\"grey-text\">\r\n                    <MDBInput\r\n                      label=\"Your Email\"\r\n                      icon=\"envelope\"\r\n                      group\r\n                      type=\"email\"\r\n                      value={email}\r\n                      onChange={handleChange(\"email\")}\r\n                      autoFocus\r\n                    />\r\n                    <MDBInput\r\n                      label=\"Your Password\"\r\n                      icon=\"lock\"\r\n                      group\r\n                      type=\"password\"\r\n                      value={password}\r\n                      onChange={handleChange(\"password\")}\r\n                    />\r\n                  </div>\r\n                  {email && !validEmail && (\r\n                    <MDBAlert color=\"danger\">Invalid Email Address</MDBAlert>\r\n                  )}\r\n                  {password && !validPassword && (\r\n                    <MDBAlert color=\"danger\">\r\n                      Password must be 8 to 64 characters, contain 1 upper, 1\r\n                      lower, 1 numberic and a special character\r\n                    </MDBAlert>\r\n                  )}\r\n                  {loginError !== \"\" && password === \"\" && (\r\n                    <MDBAlert color=\"danger\">{loginError}</MDBAlert>\r\n                  )}\r\n                  <div className=\"text-center py-2\">\r\n                    <MDBBtn\r\n                      disabled={!(validEmail && validPassword)}\r\n                      gradient=\"tempting-azure\"\r\n                      rounded\r\n                      block\r\n                      type=\"submit\"\r\n                    >\r\n                      Sign In\r\n                    </MDBBtn>\r\n                  </div>\r\n                </form>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <Link to=\"/user/forgetPassword\" className=\"float-right m-3\">\r\n                      Forget Password?\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mb-3\">\r\n                  <div className=\"col\">\r\n                    <GoogleLogin\r\n                      clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n                      buttonText=\"Login With Google\"\r\n                      onSuccess={responseGoogle}\r\n                      onFailure={responseGoogle}\r\n                      cookiePolicy={\"single_host_origin\"}\r\n                      render={(renderProps) => (\r\n                        <MDBBtn\r\n                          rounded\r\n                          outline\r\n                          color=\"success\"\r\n                          onClick={renderProps.onClick}\r\n                          disabled={renderProps.disabled}\r\n                        >\r\n                          <MDBIcon fab icon=\"google\" />\r\n                          Login With Google\r\n                        </MDBBtn>\r\n                      )}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col\">\r\n                    <FacebookLogin\r\n                      appId={process.env.REACT_APP_FACEBOOK_APP_ID}\r\n                      autoLoad={false}\r\n                      callback={responseFacebook}\r\n                      icon={<MDBIcon fab icon=\"facebook-f\" />}\r\n                      render={(renderProps) => (\r\n                        <MDBBtn\r\n                          rounded\r\n                          outline\r\n                          color=\"info\"\r\n                          onClick={renderProps.onClick}\r\n                        >\r\n                          <MDBIcon fab icon=\"facebook-f\" />\r\n                          Login With Facebook\r\n                        </MDBBtn>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    );\r\n  };\r\n  return <>{mdBootStrapLogin()}</>;\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\SubCategory.js",["303","304"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { searchProductFn } from \"../functions/product\";\r\nimport { listSubCategoryFn } from \"../functions/subCategory\";\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport { MDBCard } from \"mdbreact\";\r\nimport SearchSideBar from \"../components/nav/SearchSideBar\";\r\n\r\nconst SubCategory = ({ match }) => {\r\n  const slug = match.params.slug;\r\n  let user = useSelector((state) => {\r\n    return state.user;\r\n  });\r\n\r\n  const [products, setProduct] = useState([]);\r\n  const [sortBy, setSortBy] = useState(\"topSales\");\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [price, setPrice] = useState({ min: 0, max: 0 });\r\n  const [priceError, setPriceError] = useState(\"\");\r\n  const [starSelected, setStarSelected] = useState(0);\r\n  const [shippingProviders, setShippingProviders] = useState([]);\r\n\r\n  //If user manually type on the URL, make sure backend is call to fetch the result\r\n  useEffect(() => {\r\n    getSubCategoryID();\r\n  }, [slug]);\r\n\r\n  //trigger tobackend when category, shipping provider, and sort changed\r\n  useEffect(() => {\r\n    searchProduct(null, sortBy, subCategories, price, shippingProviders);\r\n  }, [sortBy, subCategories, shippingProviders]);\r\n\r\n  //clear price, rating and shipping on subcategory change\r\n  useEffect(() => {\r\n    setPrice({ min: 0, max: 0 });\r\n    setPriceError(\"\");\r\n    setStarSelected(0);\r\n    setShippingProviders([]);\r\n  }, [subCategories]);\r\n\r\n  //get subcategory ID as slug is pass by name instead of ID.\r\n  const getSubCategoryID = async () => {\r\n    //   //exit function for all item\r\n    // if (slug === \"allItems\") return;\r\n    try {\r\n      const res = await listSubCategoryFn();\r\n      let allSubCategories = res.data;\r\n      //if all item, set subCategories to all subcategories._id\r\n      if (slug === \"allItems\") {\r\n        let subcategoriesID = allSubCategories.map((subCategory) => {\r\n            return subCategory._id\r\n        });\r\n        setSubCategories(subcategoriesID);\r\n      } \r\n      //if only 1 category selected only checked the 1 category\r\n      else {\r\n        let defaultSubCategory = allSubCategories.filter((subCategory) => {\r\n          return subCategory.slug === slug;\r\n        });\r\n        let subcategoriesID = defaultSubCategory.map((sc) => {\r\n          return sc._id;\r\n        });\r\n        setSubCategories(subcategoriesID);\r\n      }\r\n    } catch (err) {}\r\n  };\r\n\r\n  const searchProduct = async (\r\n    keyword,\r\n    sortBy,\r\n    subCategories,\r\n    price,\r\n    shippingProviders\r\n  ) => {\r\n    try {\r\n      const res = await searchProductFn(\r\n        keyword,\r\n        sortBy,\r\n        subCategories,\r\n        price,\r\n        shippingProviders\r\n      );\r\n      setProduct(res.data);\r\n    } catch (err) {}\r\n  };\r\n\r\n  //All Search filters, by setting onchange it will trigger to useEffect which will make a call to backend and fetch new result\r\n  const handleSortByChange = (e) => {\r\n    setSortBy(e.target.value);\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setSubCategories(e);\r\n  };\r\n\r\n  const handlePrice = async (e) => {\r\n    setPriceError(\"\");\r\n    if ((price.min === 0 && price.max === 0) || price.min > price.max) {\r\n      setPriceError(\"Please input valid price range\");\r\n    } else {\r\n      try {\r\n        searchProduct(null, sortBy, subCategories, price, shippingProviders);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  const handleStarClick = (value) => {\r\n    console.log(value);\r\n    setStarSelected(value);\r\n  };\r\n\r\n  const handleShippingProviderChange = (e) => {\r\n    setShippingProviders(e);\r\n  };\r\n  //End Handle Search\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\">\r\n        <SearchSideBar\r\n          subCategories={subCategories}\r\n          handleCategoryChange={handleCategoryChange}\r\n          handlePrice={handlePrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n          priceError={priceError}\r\n          setPriceError={setPriceError}\r\n          handleStarClick={handleStarClick}\r\n          starSelected={starSelected}\r\n          handleShippingProviderChange={handleShippingProviderChange}\r\n          shippingProviders={shippingProviders}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        {subCategories.length > 0 && products && products.length > 0 ? (\r\n          <>\r\n            <h4 className=\"mt-3 mb-3\">{products.length} Search results</h4>\r\n            <div>\r\n              Sort By :{\" \"}\r\n              <select\r\n                className=\"custom-select w-25\"\r\n                name=\"SortBy\"\r\n                value={sortBy}\r\n                onChange={handleSortByChange}\r\n              >\r\n                {/* <option value=\"relevance\">Relevance</option> */}\r\n                <option value=\"topSales\">Top Sales</option>\r\n                <option value=\"priceLowToHigh\">Price Low to High</option>\r\n                <option value=\"priceHighToLow\">Price High to Low</option>\r\n              </select>\r\n            </div>\r\n\r\n            <MDBCard className=\"p-3 mt-3\">\r\n              <ProductCard products={products} user={user} />\r\n            </MDBCard>\r\n          </>\r\n        ) : (\r\n          <h4 className=\"mt-3\">No product found</h4>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubCategory;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\PlaceOrder.js",["305","306"],"import React, { useEffect, useState } from \"react\";\r\n\r\n//load Stripe.js script and initializes a Stripe Object, Pass the promise to element\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n//useStripe hook returns a reference to Stripe instance passed to the Elements provider.\r\n//useElement hook safely pass the payment information collected by the Element to the Stripe API, access the component's underlying Element Instance so that we can use it with other Stripe.js method\r\n//Element Provider allow us to use element components and access to the stripe object in any nested component.\r\nimport {\r\n  Elements\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Fragment } from \"react\";\r\nimport CheckoutForm from \"../components/CheckoutForm\";\r\n\r\n//call load stripe outside of function as we do not want to recreate loadStripe object on every render.\r\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\r\n\r\nconst PlaceOrder = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Elements stripe={promise}>\r\n          <CheckoutForm/>\r\n      </Elements>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default PlaceOrder;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ResetPassword.js",["307","308"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { resetPasswordFn, resetPasswordWithPasswordFn } from \"../functions/auth\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody, MDBAlert } from 'mdbreact';\r\nlet validationSet = new Set();\r\nlet validationArr = [];\r\nconst passwordRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,64})\");\r\n\r\nconst ResetPassword = ({ match, history }) => {\r\n\r\n    const user = useSelector(state => {\r\n        return state.user;\r\n    });\r\n\r\n    //redirect base on role\r\n    const roleBasedRedirect = user => {\r\n        console.log(\"roleBasedRedirect\", user);\r\n        if (user.role === \"admin\") {\r\n            history.push(\"/admin/dashboard\");\r\n        }\r\n        else if (user.role === \"normal\") {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    //Redirect if user logged in\r\n    useEffect(() => {\r\n        if (user && user.email && user.token) {\r\n            //redirect\r\n            roleBasedRedirect(user);\r\n        }\r\n    }, [user]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [validations, setValidations] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        password1: \"\",\r\n        password2: \"\"\r\n    });\r\n\r\n    const { password1, password2 } = formData;\r\n\r\n    const resetPassword = async token => {\r\n        try {\r\n            const res = await resetPasswordFn(token);\r\n            if (res.status !== 204) {\r\n                window.alert(\"Reset Password Error, please try again\");\r\n                history.push(\"/user/forgetPassword\");\r\n            }\r\n        } catch (err) {\r\n            window.alert(err.response.data.error);\r\n            history.push(\"/user/forgetPassword\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const token = match.params.token;\r\n        resetPassword(token);\r\n    }, [])\r\n\r\n\r\n    const resetPasswordForm = () => {\r\n        return (\r\n            <MDBContainer className=\"p-5\">\r\n                <MDBRow>\r\n                    <MDBCol md=\"6\" className=\"offset-md-3\">\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <form onSubmit={handleSubmit}>\r\n                                    <p className=\"h4 text-center py-4\">Reset Password</p>\r\n                                    <div className=\"grey-text\">\r\n                                        <MDBInput\r\n                                            label=\"Password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"password\"\r\n                                            value={password1}\r\n                                            onChange={handleChange(\"password1\")}\r\n                                        />\r\n                                        <MDBInput\r\n                                            label=\"Confirm Password\"\r\n                                            icon=\"lock\"\r\n                                            group\r\n                                            type=\"password\"\r\n                                            value={password2}\r\n                                            onChange={handleChange(\"password2\")}\r\n                                        />\r\n                                    </div>\r\n                                    {validations && validations.length > 0 && validations.map((v, i) => {\r\n                                        return <MDBAlert key={i} className=\"list-group-item list-group-item-danger p-2 m-1\">{v}</MDBAlert>\r\n                                    })}\r\n                                    <MDBBtn disabled={!(password1 && password2 && validations.length === 0)} gradient=\"tempting-azure\" rounded block type=\"submit\">\r\n                                        Reset Pasword\r\n                                        </MDBBtn>\r\n                                </form>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        if (password1 === password2) {\r\n            try {\r\n                const res = await resetPasswordWithPasswordFn(match.params.token, password1);\r\n                //clear form data\r\n                setFormData({\r\n                    password1: \"\",\r\n                    password2: \"\"\r\n                });\r\n                //update redux\r\n                dispatch({\r\n                    type: \"LOGGED_IN_USER\",\r\n                    payload: res.data\r\n                });\r\n\r\n                //redirect to home\r\n                roleBasedRedirect(user);\r\n\r\n            } catch (err) {\r\n                window.alert(err.response.data.error);\r\n                history.push(\"/user/forgetPassword\");\r\n            }\r\n        }\r\n        else {\r\n            window.alert(\"ResetPassword Error please try again\");\r\n            setFormData({\r\n                ...formData,\r\n                password1: \"\",\r\n                password2: \"\"\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = text => e => {\r\n        setFormData({ ...formData, [text]: e.target.value });\r\n\r\n        if (text === \"password1\") {\r\n            if (!passwordRegex.test(e.target.value)) {\r\n                validationSet.add(\"Password must be 8 to 64 characters, contain 1 upper, 1 lower, 1 numberic and a special character\");\r\n\r\n            } else {\r\n                validationSet.delete(\"Password must be 8 to 64 characters, contain 1 upper, 1 lower, 1 numberic and a special character\");\r\n            }\r\n            if (e.target.value !== password2) {\r\n                validationSet.add(\"Password and confirm Password don't match\");\r\n            } else {\r\n                validationSet.delete(\"Password and confirm Password don't match\");\r\n            }\r\n        }\r\n\r\n        if (text === \"password2\") {\r\n            if (e.target.value !== password1) {\r\n                validationSet.add(\"Password and confirm Password don't match\");\r\n            } else {\r\n                validationSet.delete(\"Password and confirm Password don't match\");\r\n            }\r\n        }\r\n\r\n        validationArr = [...validationSet];\r\n\r\n        setValidations(validationArr);\r\n    }\r\n\r\n    // Return Layuout\r\n    return (\r\n        resetPasswordForm()\r\n    )\r\n}\r\n\r\nexport default ResetPassword;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Search.js",["309"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { searchProductFn } from \"../functions/product\";\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport { MDBCard } from 'mdbreact';\r\nimport SearchSideBar from \"../components/nav/SearchSideBar\";\r\n\r\nconst Search = () => {\r\n    //grep redux search keyword\r\n    let keyword = useSelector(state => {\r\n        return state.search.keyword;\r\n    });\r\n   //grep redux user\r\n    let user = useSelector(state=> {\r\n        return state.user;\r\n    })\r\n\r\n    const [products, setProduct] = useState([]);\r\n    const [sortBy, setSortBy] = useState(\"relevance\");\r\n    const [subCategories,setSubCategories] = useState([]);\r\n    const [price, setPrice] = useState({min:0,max:0});\r\n    const [priceError, setPriceError] = useState(\"\");\r\n    const [starSelected, setStarSelected] = useState(0);\r\n    const [shippingProviders,setShippingProviders] = useState([]);\r\n\r\n    //clear filter when search keyword changed\r\n    useEffect(()=> {\r\n        setSubCategories([]);\r\n        setPrice({min:0,max:0});\r\n        setStarSelected(0);\r\n        setShippingProviders([]);\r\n    },[keyword]);\r\n\r\n    //settimeout 300ms so that not every keyword type will send a request to backend\r\n    useEffect(() => {\r\n        const delay = setTimeout(() => {\r\n            searchProduct(keyword, sortBy, subCategories, price, shippingProviders);\r\n        }, 300);\r\n        return () => clearTimeout(delay);\r\n    }, [keyword, sortBy, subCategories, shippingProviders]);\r\n\r\n    const searchProduct = async (keyword, sortBy, subCategories, price, shippingProviders) => {\r\n        try {\r\n            const res = await searchProductFn(keyword, sortBy, subCategories, price, shippingProviders);\r\n            setProduct(res.data);\r\n        } catch (err) {\r\n        }\r\n    }\r\n\r\n    //All Search filters, by setting onchange it will trigger to useEffect which will make a call to backend and fetch new result\r\n    const handleSortByChange = e  => {\r\n        setSortBy(e.target.value);\r\n    }\r\n\r\n    const handleCategoryChange = e => {\r\n        setSubCategories(e);\r\n    }\r\n\r\n    const handlePrice =async e => {\r\n        setPriceError(\"\");\r\n        if( (price.min === 0 && price.max === 0) || (price.min > price.max) ) {\r\n            setPriceError(\"Please input valid price range\");\r\n        } else {\r\n            try {\r\n                searchProduct(keyword,sortBy,subCategories,price, shippingProviders);\r\n                \r\n            } catch (err) {\r\n                \r\n            }\r\n        }\r\n    }\r\n    //todo pirority 2\r\n    const handleStarClick = value => {\r\n        console.log(value);\r\n        setStarSelected(value);\r\n    }\r\n\r\n    const handleShippingProviderChange = e => {\r\n        setShippingProviders(e);\r\n    }\r\n    //End Handle Search\r\n    \r\n\r\n    return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-2\">\r\n                    <SearchSideBar \r\n                        subCategories={subCategories}\r\n                        handleCategoryChange={handleCategoryChange}\r\n                        handlePrice={handlePrice}\r\n                        price={price}\r\n                        setPrice={setPrice}\r\n                        priceError={priceError}\r\n                        setPriceError={setPriceError}\r\n                        handleStarClick={handleStarClick}\r\n                        starSelected={starSelected}\r\n                        handleShippingProviderChange={handleShippingProviderChange}\r\n                        shippingProviders = {shippingProviders}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-10\">\r\n                {\r\n                products && products.length > 0 ?\r\n                            (\r\n                                <>\r\n                                    <h4 className=\"mt-3 mb-3\">{products.length} Search results for '{keyword}'</h4>\r\n                                    <div>Sort By : <select\r\n                                        className=\"custom-select w-25\"\r\n                                        name=\"SortBy\"\r\n                                        value={sortBy}\r\n                                        onChange={handleSortByChange}\r\n                                        \r\n                                    >\r\n                                        <option value=\"relevance\">Relevance</option>\r\n                                        <option value=\"topSales\">Top Sales</option>\r\n                                        <option value=\"priceLowToHigh\">Price Low to High</option>\r\n                                        <option value=\"priceHighToLow\">Price High to Low</option>\r\n                                    </select>\r\n                                    </div>\r\n                                    \r\n                                    <MDBCard className=\"p-3 mt-3\">\r\n                                        <ProductCard\r\n                                            products={products}\r\n                                            user={user}\r\n                                        />\r\n                                    </MDBCard>\r\n                                </>\r\n                            ) : (<h4 className=\"mt-3\">No product found for '{keyword}'</h4>)\r\n                }\r\n                </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default Search;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\ProductDetails.js",["310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335"],"import React, { useEffect, useState } from \"react\";\r\nimport { getProductFn, getRelatedProductsFn } from \"../functions/product\";\r\nimport {\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput,\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBAlert,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport { Image, Modal } from \"antd\";\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addToCartFn } from \"../functions/cart\";\r\nimport getRefreshToken from \"../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../functions/auth\";\r\n\r\n//Initial State for form data to Server\r\nconst initialState = {\r\n  _id: \"\",\r\n  name: \"\",\r\n  slug: \"\",\r\n  description: \"\",\r\n  price: \"\",\r\n  availableQuantity: \"\",\r\n  sold: \"\",\r\n  images: [],\r\n  ratings: [],\r\n  color: [],\r\n  category: {},\r\n  subCategories: [],\r\n  brand: \"\",\r\n  shippingProvider: [],\r\n};\r\nconst ProductDetails = ({ match }) => {\r\n  const { user, cart } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [product, setProduct] = useState(initialState);\r\n  const {\r\n    _id,\r\n    name,\r\n    slug,\r\n    description,\r\n    price,\r\n    availableQuantity,\r\n    sold,\r\n    images,\r\n    ratings,\r\n    color,\r\n    category,\r\n    subCategories,\r\n    brand,\r\n    shippingProvider,\r\n  } = product;\r\n  const [relatedProducts, setRelatedProducts] = useState([]);\r\n  const {\r\n    relatedName,\r\n    relatedDescription,\r\n    relatedPrice,\r\n    relatedAvailableQuantity,\r\n    relatedSold,\r\n    relatedImages,\r\n    relatedRatings,\r\n    relatedColor,\r\n    relatedCategory,\r\n    relatedSubCategories,\r\n    relatedBrand,\r\n    relatedShippingProvider,\r\n  } = relatedProducts;\r\n  const [errorDetails, setErrorDetails] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [visible, setVisible] = useState(false);\r\n  const [largeImages, setLargeImages] = useState(false);\r\n  //get current product data\r\n  const getProduct = async () => {\r\n    try {\r\n      const res = await getProductFn(match.params.slug);\r\n      //only retrieve IDs for subcategory, shipping provider which will be easier to update on backend\r\n      setProduct((prevState) => ({\r\n        ...prevState,\r\n        _id: res.data._id,\r\n        name: res.data.name,\r\n        slug: res.data.slug,\r\n        description: res.data.description,\r\n        price: res.data.price,\r\n        availableQuantity: res.data.availableQuantity,\r\n        sold: res.data.sold,\r\n        images: res.data.images,\r\n        ratings: res.data.ratings,\r\n        color: res.data.color,\r\n        category: res.data.category,\r\n        subCategories: res.data.subCategories,\r\n        brand: res.data.brand,\r\n        shippingProvider: res.data.shippingProvider,\r\n      }));\r\n      //Get Related Product\r\n      getRelatedProducts(res.data._id, res.data.category._id);\r\n    } catch (err) {\r\n      setErrorDetails(\"Product Not Found\");\r\n    }\r\n  };\r\n\r\n  const getRelatedProducts = async (productID, categoryID) => {\r\n    const res = await getRelatedProductsFn(productID, categoryID);\r\n    setRelatedProducts(res.data);\r\n  };\r\n  //when related product was click it will scroll to top\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    getProduct();\r\n  }, [match.params.slug]);\r\n\r\n  const productDetailsForm = () => {\r\n    return (\r\n      <MDBCard className=\"p-2 mt-3\">\r\n        <Modal\r\n          visible={visible}\r\n          footer={null}\r\n          onCancel={() => setVisible(false)}\r\n        >\r\n          <img alt=\"example\" style={{ width: \"100%\" }} src={largeImages} />\r\n        </Modal>\r\n        <div className=\"row ml-1 mr-1\">\r\n          {errorDetails && (\r\n            <h4 className=\"text-center text-danger\">{errorDetails}</h4>\r\n          )}\r\n          <div className=\"col-md-6 mt-3\">\r\n            <Carousel onClickItem={handleonClickItem} swipeable={true}>\r\n              {images &&\r\n                images.map((image, i) => {\r\n                  return (\r\n                    <div\r\n                      key={i}\r\n                      style={{ height: \"500px\", objectFit: \"cover\" }}\r\n                    >\r\n                      <img src={`${process.env.REACT_APP_AWSS3DIR}/${image}`} />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Carousel>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <h3 className=\"mt-4\">{name}</h3>\r\n\r\n            <h3 className=\"text-danger mt-3\">{price&&price.toFixed(2)}</h3>\r\n\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-md-3\">Sold:</div>\r\n              <div className=\"col-md-9\">{sold}</div>\r\n            </div>\r\n\r\n            <div className=\"mt-4\">\r\n              {shippingProvider &&\r\n                shippingProvider.map((sp, i) => {\r\n                  return (\r\n                    <div className=\"row\" key={sp._id}>\r\n                      <div className=\"col-md-3\">{i == 0 && \"Shipping\"}</div>\r\n                      <div className=\"col-md-9\">{sp.name}</div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-md-3\">Quantity:</div>\r\n              <div className=\"col-md-9 \">\r\n                <div>\r\n                  <input\r\n                    type=\"number\"\r\n                    min={1}\r\n                    name=\"quantity\"\r\n                    value={quantity}\r\n                    onChange={(e) => {\r\n                      let value =\r\n                        e.target.value > availableQuantity\r\n                          ? availableQuantity\r\n                          : e.target.value;\r\n                      setQuantity(parseInt(value));\r\n                    }}\r\n                  />\r\n                  <span className=\"font-weight-light font-italic ml-3\">\r\n                    {availableQuantity} available\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row mt-5\">\r\n              {availableQuantity && availableQuantity > 0 ? (\r\n                <MDBBtn\r\n                  outline\r\n                  color=\"danger\"\r\n                  className=\"col-md-3 ml-3\"\r\n                  onClick={handleAddToCart}\r\n                >\r\n                  <MDBIcon icon=\"cart-plus\" />\r\n                  Add To Cart\r\n                </MDBBtn>\r\n              ) : (\r\n                <MDBBtn\r\n                  outline\r\n                  color=\"danger\"\r\n                  className=\"col-md-3 ml-3\"\r\n                  disabled={true}\r\n                >Sold Out</MDBBtn>\r\n              )}\r\n              <MDBBtn\r\n                color=\"danger\"\r\n                className=\"col-md-3 ml-4 font-weight-bolder\"\r\n              >\r\n                Buy Now\r\n              </MDBBtn>\r\n              {/* <MDBBtn outline color=\"unique\" className=\"col-md-3 ml-4\">\r\n                <MDBIcon far icon=\"heart\" />\r\n                Add to WishList\r\n              </MDBBtn> */}\r\n            </div>\r\n            {/* <div className=\"row mt-4 \">\r\n              <div\r\n                style={{ fontSize: \"12px\", color: \"grey\" }}\r\n                className=\"col-md-3 font-weight-light\"\r\n              >\r\n                Category:\r\n              </div>\r\n              <div style={{ fontSize: \"12px\" }} className=\"col-md-9\">\r\n                <Link to={`/subcategory/${category.slug}`}>{category.name}</Link>\r\n              </div>\r\n            </div> */}\r\n            <div className=\"row mt-4\">\r\n              <div\r\n                style={{ fontSize: \"12px\", color: \"grey\" }}\r\n                className=\"col-md-3 font-weight-light\"\r\n              >\r\n                Sub Categories:\r\n              </div>\r\n              <div style={{ fontSize: \"12px\" }} className=\"col-md-9\">\r\n                {subCategories.map((sc, i) => {\r\n                  return i == 0 ? (\r\n                    <Link to={`/subcategory/${sc.slug}`} key={i}>\r\n                      {sc.name}\r\n                    </Link>\r\n                  ) : (\r\n                    <Link to=\"\" key={i} className=\"ml-3\">\r\n                      {sc.name}\r\n                    </Link>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            <MDBAlert color=\"secondary\" className=\"row mt-4 h5\">\r\n              Product Description\r\n            </MDBAlert>\r\n            <div className=\"ml-1\">{description}</div>\r\n          </div>\r\n        </div>\r\n      </MDBCard>\r\n    );\r\n  };\r\n  //enlarge image. e is the number of the carousell item\r\n  const handleonClickItem = (e) => {\r\n    setVisible(true);\r\n    setLargeImages(`${process.env.REACT_APP_AWSS3DIR}/${product.images[e]}`);\r\n  };\r\n\r\n  //Add To Cart if user log in, add to DB, else add to local storage\r\n  const handleAddToCart = async () => {\r\n    if (typeof window !== \"undefined\") {\r\n      //check window object\r\n      if (user && user.email && user.token) {\r\n        //user logged in\r\n        let productReq = {};\r\n        productReq.productID = product._id;\r\n        productReq.purchaseQuantity = quantity;\r\n        try {\r\n          console.log(\"!!!!!!!!!!!!!!!!!!!here\");\r\n          const res = await addToCartFn(productReq, user.token);\r\n          console.log(res.data);\r\n          //add to redux store for Cart, CartModal and showModalProductReducer\r\n          dispatch({\r\n            type: \"ADD_TO_CART\",\r\n            payload: res.data,\r\n          });\r\n          dispatch({\r\n            type: \"TOGGLE_CARTMODAL\",\r\n            payload: true,\r\n          });\r\n          dispatch({\r\n            type: \"ADD_PRODUCT_TO_MODAL\",\r\n            payload: product,\r\n          });\r\n          //clear quantity state\r\n          setQuantity(1);\r\n        } catch (err) {\r\n          if (err.response.data.error === \"J01\") {\r\n            const rfAuthToken = getRefreshToken();\r\n            if (rfAuthToken) {\r\n              try {\r\n                const res2 = await refreshTokenFn(rfAuthToken);\r\n                //update redux state\r\n                dispatch({\r\n                  type: \"REFRESH_TOKEN\",\r\n                  payload: res2.data,\r\n                });\r\n                const res3 = await addToCartFn(productReq, res2.data.token);\r\n                //add to redux store for Cart, CartModal and showModalProductReducer\r\n                dispatch({\r\n                  type: \"ADD_TO_CART\",\r\n                  payload: res3.data,\r\n                });\r\n                dispatch({\r\n                  type: \"TOGGLE_CARTMODAL\",\r\n                  payload: true,\r\n                });\r\n                dispatch({\r\n                  type: \"ADD_PRODUCT_TO_MODAL\",\r\n                  payload: product,\r\n                });\r\n                //clear quantity state\r\n                setQuantity(1);\r\n              } catch (err) {}\r\n            }\r\n          } else {\r\n            //fail not because of auth token\r\n          }\r\n        }\r\n      } else {\r\n        //user NOT logged in\r\n        let cart = [];\r\n        if (localStorage.getItem(\"cart\")) {\r\n          cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n        }\r\n        //add quantity to product\r\n        product.quantity = quantity;\r\n        //check if product exist in cart, if exist append the quantity, else push as a new array\r\n        if (cart.length === 0) {\r\n          cart.push({\r\n            ...product,\r\n          });\r\n        } else {\r\n          let itemExist = false;\r\n          for (let i = 0; i < cart.length; i++) {\r\n            if (cart[i]._id === _id) {\r\n              cart[i].quantity += quantity;\r\n              itemExist = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!itemExist) {\r\n            //if item not found after forloop, push to storage\r\n            cart.push({\r\n              ...product,\r\n            });\r\n          }\r\n        }\r\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n        //add to redux store for Cart, CartModal and showModalProductReducer\r\n        dispatch({\r\n          type: \"ADD_TO_CART\",\r\n          payload: cart,\r\n        });\r\n        dispatch({\r\n          type: \"TOGGLE_CARTMODAL\",\r\n          payload: true,\r\n        });\r\n        dispatch({\r\n          type: \"ADD_PRODUCT_TO_MODAL\",\r\n          payload: product,\r\n        });\r\n        //clear quantity state\r\n        setQuantity(1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const relatedProductsCard = () => {\r\n    return (\r\n      <MDBCard className=\"p-2 mt-3\">\r\n        <h4 className=\"mb-4\">You May Also Like</h4>\r\n        <ProductCard products={relatedProducts} />\r\n      </MDBCard>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {productDetailsForm()}\r\n      {relatedProductsCard()}\r\n    </div>\r\n  );\r\n};\r\nexport default ProductDetails;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\Profile.js",["336"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport UserSideBar from \"../../components/nav/UserSideBar\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getUserProfileFn } from \"../../functions/user\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n  const { token } = useSelector((state) => {\r\n    return state.user;\r\n  });\r\n  const [userProfile, setUserProfile] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    addresses: [{}],\r\n    cardsLast4: [],\r\n  });\r\n\r\n  const getUserProfile = async () => {\r\n    try {\r\n      const res = await getUserProfileFn(token);\r\n      setUserProfile(res.data);\r\n    } catch (err) {\r\n      console.log(err);\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await getUserProfileFn(res2.data.token);\r\n            setUserProfile(res3.data);\r\n          } catch (err) {\r\n            // todo set error\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserProfile();\r\n  }, [token]);\r\n\r\n  const UserProfileForm = () => {\r\n    return (\r\n      <>\r\n        <div className=\"mt-5 row\">\r\n          <p className=\"col-sm-2 col-form-label\">Email</p>\r\n          <p className=\"col-sm-10\">{userProfile.email}</p>\r\n        </div>\r\n        <div className=\"mt-5 row\">\r\n          <p className=\"col-sm-2 col-form-label\">Name</p>\r\n          <p className=\"col-sm-10\">{userProfile.name}</p>\r\n        </div>\r\n        {userProfile.addresses && userProfile.addresses.length > 0 && (\r\n          <div className=\"mt-5 row\">\r\n            {userProfile.addresses.map((a, i) => {\r\n              return (\r\n                <Fragment key={a._id}>\r\n                  <p className=\"col-sm-2 col-form-label\">Addresses{i + 1}</p>\r\n                  <p className=\"col-sm-10 mt-1\">\r\n                    {a.buildingOrStreet}|{a.unitNo}\r\n                    <br />\r\n                    {a.country}|{a.postalCode}\r\n                    <br />\r\n                    {a.city}|{a.contactNumber}\r\n                  </p>\r\n                </Fragment>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n        {userProfile.cardsLast4 && userProfile.cardsLast4.length > 0 && (\r\n          <div className=\"mt-5 row\">\r\n            {userProfile.cardsLast4.map((c, i) => {\r\n              return (\r\n                <Fragment key={c}>\r\n                  <p className=\"col-sm-2 col-form-label\">Payment{i + 1}</p>\r\n                  <p className=\"col-sm-10 mt-1\">Last for Digit : {c}</p>\r\n                </Fragment>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\">\r\n        <UserSideBar />\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <form>{UserProfileForm()}</form>\r\n        {/* {JSON.stringify(userProfile.cardsLast4)}\r\n        {JSON.stringify(userProfile.cardsLast4.length)} */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\UpdatePassword.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\PurchaseHistory.js",["337","338","339","340","341","342","343","344"],"import React, { useEffect, useState } from \"react\";\r\nimport UserSideBar from \"../../components/nav/UserSideBar\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getUserOrderFn, userConfirmDeliveryFn } from \"../../functions/order\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nimport { Image } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst PurchaseHistory = (props) => {\r\n  const { token } = useSelector((state) => {\r\n    return state.user;\r\n  });\r\n\r\n  //set state\r\n  const [userOrder, setUserOrder] = useState([]);\r\n  const [navActive, setNavActive] = useState(\"\");\r\n  const [urlStatus, setUrlStatus] = useState(\"\");\r\n  //dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const getUserOrder = async (status) => {\r\n    try {\r\n      const res = await getUserOrderFn(status, token);\r\n      setUserOrder(res.data);\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await getUserOrderFn(status, res2.data.token);\r\n            setUserOrder(res3.data);\r\n          } catch (err) {\r\n            // todo set error\r\n          }\r\n        }\r\n      } else {\r\n        //fail not because of auth token\r\n        // todo set error\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"#@!U#seEffect!@#\");\r\n    console.log(props.location.search);\r\n    if (props.location && props.location.search !== \"\") {\r\n      const status = props.location.search.split(\"?status=\")[1];\r\n      setUrlStatus(status);\r\n      getUserOrder(status);\r\n    } else {\r\n      const status = \"all\";\r\n      setUrlStatus(status);\r\n      getUserOrder(status);\r\n    }\r\n  }, [props.location.search]);\r\n\r\n  const handleConfirmDelivery = async (orderID, orderStatus) => {\r\n    try {\r\n      await userConfirmDeliveryFn(orderID, orderStatus, token);\r\n      // props.history.replace({pathname:\"purchaseHistory\",search:\"?status=Completed\"});\r\n      props.history.push({\r\n        pathname: \"purchaseHistory\",\r\n        search: \"?status=Completed\",\r\n      });\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            await userConfirmDeliveryFn(orderID, orderStatus, res2.data.token);\r\n            // props.history.replace({pathname:\"purchaseHistory\",search:\"?status=Completed\"});\r\n            props.history.push({\r\n              pathname: \"purchaseHistory\",\r\n              search: \"?status=Completed\",\r\n            });\r\n          } catch (err) {\r\n            // todo set error\r\n          }\r\n        }\r\n      } else {\r\n        //fail not because of auth token\r\n        // todo set error\r\n      }\r\n    }\r\n  };\r\n  const displayPurchaseOrder = () => {\r\n    return userOrder.map((order) => {\r\n      return (\r\n        <div\r\n          className=\"m-3\"\r\n          style={{ border: \"2px solid rgba(0, 0, 0, 0.1)\" }}\r\n          key={order._id}\r\n        >\r\n          <div className=\"mb-2\">\r\n            <span style={{ border: \"1px solid orange\" }}>\r\n              Order ID : {order._id}\r\n            </span>\r\n            <span\r\n              className=\"float-right\"\r\n              style={{ border: \"1px solid orange\" }}\r\n            >\r\n              Status : {order.orderStatus}\r\n            </span>\r\n          </div>\r\n          {order.products.map((p) => {\r\n            return (\r\n              <Fragment key={p._id}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-8\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-4\">\r\n                        <Link to={`../productDetails/${p.product.slug}`}>\r\n                          <Image\r\n                            src={`${process.env.REACT_APP_AWSS3DIR}/${p.product.images[0]}`}\r\n                            preview={false}\r\n                            width={100}\r\n                          />\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"col-md-8\">\r\n                        <div className=\"font-weight-bold\">{p.product.name}</div>\r\n                        <div className=\"font-weight-light\">\r\n                          {p.product.description}\r\n                        </div>\r\n                        <div className=\"font-weight\">\r\n                          Qty:{p.purchaseQuantity}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-4\">\r\n                    <div className=\"font-weight-bold\">\r\n                      ${p.totalPriceWithQuantity}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n          <hr />\r\n          <div className=\"row pb-3\" style={{ clear: \"both\" }}>\r\n            <div className=\"col-md-3\">\r\n              {(order.orderStatus === \"Payment Confirmed\" ||\r\n              order.orderStatus === \"Delivering\") && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-success btn-sm w-100\"\r\n                  onClick={() => handleConfirmDelivery(order._id, \"Completed\")}\r\n                >\r\n                  Confirm Delivery\r\n                </button>\r\n              ) }\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-sm w-100\"\r\n              >\r\n                ReOrder\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-danger btn-sm w-100\"\r\n              >\r\n                Refund\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              Order Total : ${`${order.totalPriceBeforeDiscount}`}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\">\r\n        <UserSideBar />\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <ul className=\"nav nav-tabs\">\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to=\"/user/purchaseHistory?status=all\"\r\n          >\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={urlStatus === \"all\" ? \"nav-link active\" : \"nav-link\"}\r\n              >\r\n                All\r\n              </a>\r\n            </li>\r\n          </Link>\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to=\"/user/purchaseHistory?status=Payment Confirmed\"\r\n          >\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={\r\n                  urlStatus === \"Payment Confirmed\"\r\n                    ? \"nav-link active\"\r\n                    : \"nav-link\"\r\n                }\r\n              >\r\n                Payment Confirmed\r\n              </a>\r\n            </li>\r\n          </Link>\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to=\"/user/purchaseHistory?status=Delivering\"\r\n          >\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={\r\n                  urlStatus === \"Delivering\" ? \"nav-link active\" : \"nav-link\"\r\n                }\r\n              >\r\n                Delivering\r\n              </a>\r\n            </li>\r\n          </Link>\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to=\"/user/purchaseHistory?status=Completed\"\r\n          >\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={\r\n                  urlStatus === \"Completed\" ? \"nav-link active\" : \"nav-link\"\r\n                }\r\n              >\r\n                Completed\r\n              </a>\r\n            </li>\r\n          </Link>\r\n          <Link\r\n            style={{ textDecoration: \"none\", color: \"black\" }}\r\n            to=\"/user/purchaseHistory?status=Cancelled\"\r\n          >\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className={\r\n                  urlStatus === \"Cancelled\" ? \"nav-link active\" : \"nav-link\"\r\n                }\r\n              >\r\n                Cancelled\r\n              </a>\r\n            </li>\r\n          </Link>\r\n        </ul>\r\n        {displayPurchaseOrder()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PurchaseHistory;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\ViewAllProducts.js",["345","346","347","348","349"],"import React, { useState, useEffect } from \"react\";\r\nimport AdminSideBar from \"../../components/nav/AdminSideBar\";\r\nimport { MDBIcon, MDBCard } from 'mdbreact';\r\nimport { getProductsFn, deleteProductFn } from \"../../functions/product\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport ProductCard from \"../../components/ProductCard\";\r\n\r\n\r\nconst ViewAllProduct = ({ history }) => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const [products, setProducts] = useState([]);\r\n    const getProducts = async () => {\r\n        const res = await getProductsFn();\r\n        setProducts(res.data);\r\n    }\r\n    const [response, setResponse] = useState({\r\n        message: \"\",\r\n        css: \"\",\r\n    });\r\n\r\n    // const [showToast, setShowToast] = useState(false);\r\n\r\n    //load all products\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    //handleDelete\r\n    const handleDelete = async (slug) => {\r\n        try {\r\n            const res = await deleteProductFn(slug, user.token);\r\n            setResponse({ ...response, message: res.data, css: \"success\" });\r\n            // setShowToast(true);\r\n            console.log(res);\r\n            toast.success(res.data);\r\n            getProducts();//render products\r\n        } catch (err) {\r\n            if (err.response.data.error === \"J01\") { //retry once\r\n                //get Refresh Token from local storage\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await deleteProductFn(slug, res2.data.token);\r\n                        setResponse({ ...response, message: res3.data, css: \"success\" });\r\n                        toast.success(res3.data);\r\n                        getProducts();//render products\r\n                    } catch (err) {//fail second time\r\n                        setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                        toast.error(err.response.data.error);\r\n                    }\r\n                } else { //No auth Token\r\n                    setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                    toast.error(err.response.data.error);\r\n                }\r\n            } else { //fail not because of auth token\r\n                setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                toast.error(err.response.data.error);\r\n            }\r\n        }\r\n    }\r\n    //handleEdit\r\n    const handleEdit = async slug => {\r\n        history.push(\"\")\r\n    }\r\n\r\n    const ViewAllProductForm = () => {\r\n        return (\r\n            <ProductCard\r\n                handleDelete={handleDelete}\r\n                products={products}\r\n                user={user}\r\n            />\r\n            // <div className=\"row\"\r\n            // >\r\n            //     {products.map(p => {\r\n            //         return (\r\n            //             <div className=\"col-md-3 mb-3 d-flex align-items-stretch\" key={p._id}>\r\n            //                 <div className=\"card pb-2\" >\r\n            //                     <div className=\"view overlay\">\r\n            //                         {/* image here */}\r\n            //                         <img\r\n            //                             // style={{ height: '10rem' }} \r\n            //                             src={`${process.env.REACT_APP_AWSS3DIR}/${p.images[0]}`} className=\"card-img-top\" alt=\"\">\r\n            //                         </img>\r\n            //                         <div className=\"card-body\">\r\n            //                             <div className=\"font-weight-bolder\">\r\n            //                                 {p.name}\r\n            //                             </div>\r\n            //                             <div className=\"deep-orange-text\">\r\n            //                                 ${p.price}\r\n            //                             </div>\r\n            //                             <div className=\"font-weight-light\" style={{ fontSize: \"12px\" }}>\r\n            //                                 {p.description && p.description.length > 30 ? `${p.description.substring(0, 30)}...` : p.description}\r\n            //                             </div>\r\n            //                             <div className=\"mt-1\">\r\n            //                                 <span className=\"float-left mr-2 block\"><MDBIcon far icon=\"heart\" /></span>\r\n            //                                 <span className=\"block ml-3\"><MDBIcon far icon=\"star\" /><MDBIcon far icon=\"star\" /><MDBIcon far icon=\"star\" /><MDBIcon far icon=\"star\" /><MDBIcon far icon=\"star\" /></span>\r\n            //                                 <span className=\"float-right block mt-1\" style={{ fontSize: \"13px\" }}>{p.sold} sold</span>\r\n            //                             </div>\r\n            //                             <div className=\"mt-1\">\r\n            //                                 <MDBIcon\r\n            //                                     onClick={() => handleDelete(p.slug)}\r\n            //                                     className=\"float-right pt-1 text-danger\"\r\n            //                                     style={{ cursor: 'pointer' }}\r\n            //                                     far\r\n            //                                     icon=\"trash-alt\" />\r\n\r\n            //                                 <Link to={`/admin/updateProduct/${p.slug}`}>\r\n            //                                     <MDBIcon className=\"float-right pt-1 pr-3 text-warning\"\r\n            //                                         style={{ cursor: 'pointer' }}\r\n            //                                         far\r\n            //                                         icon=\"edit\"\r\n            //                                     // onClick={() => handleEdit(p.slug)}\r\n            //                                     />\r\n            //                                 </Link>\r\n            //                             </div>\r\n            //                         </div>\r\n            //                     </div>\r\n            //                 </div>\r\n            //             </div>\r\n            //         )\r\n            //     })}\r\n            // </div>\r\n        )\r\n    }\r\n\r\n    //render UI\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-2\">\r\n                <AdminSideBar />\r\n            </div>\r\n            <div className=\"col-md-10\">\r\n                <div className=\"row pl-3 pt-2 pb-2 mt-3\">\r\n                    <h4>All Products</h4>\r\n                </div>\r\n                {ViewAllProductForm()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ViewAllProduct;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\user\\Wishlist.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\AdminDashboard.js",["350","351"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminSideBar from \"../../components/nav/AdminSideBar\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  adminGetUserOrdersFn,\r\n  adminSearchOrderStatusFn,\r\n} from \"../../functions/order\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\nimport { Image } from \"antd\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nimport { adminUpdateOrderStatusFn } from \"../../functions/order\";\r\n\r\nconst AdminDashboard = () => {\r\n  //set status for react select\r\n  let orderStatuses = [\r\n    \"Payment Confirmed\",\r\n    \"Delivering\",\r\n    \"Completed\",\r\n    \"Cancelled\",\r\n  ];\r\n  //set state\r\n  const [orders, setOrders] = useState([]);\r\n  const [searchOrderID, setSearchOrderID] = useState(\"\");\r\n  const [searchEmail, setSearchEmail] = useState(\"\");\r\n  //get token from redux\r\n  const { token } = useSelector((state) => {\r\n    return state.user;\r\n  });\r\n\r\n  //dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  const adminGetUserOrders = async (orderID, userID) => {\r\n    try {\r\n      orderID = orderID || \"\";\r\n      userID = userID || \"\";\r\n      console.log(\"orderID\", orderID);\r\n      console.log(\"userID\", userID);\r\n      const res = await adminGetUserOrdersFn(orderID, userID, token);\r\n      console.log(res.data);\r\n      setOrders(res.data);\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await adminGetUserOrdersFn(\r\n              orderID,\r\n              userID,\r\n              res2.data.token\r\n            );\r\n            setOrders(res3.data);\r\n          } catch (err) {\r\n            // todo set error\r\n          }\r\n        }\r\n      } else {\r\n        //fail not because of auth token\r\n        // todo set error\r\n      }\r\n    }\r\n  };\r\n\r\n  const adminSearchOrderStatus = async (orderID, email) => {\r\n    try {\r\n      const res = await adminSearchOrderStatusFn(orderID, email, token);\r\n      setOrders(res.data);\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            //update redux state\r\n            dispatch({\r\n              type: \"REFRESH_TOKEN\",\r\n              payload: res2.data,\r\n            });\r\n            const res3 = await adminSearchOrderStatusFn(\r\n              orderID,\r\n              email,\r\n              res2.data.token\r\n            );\r\n            setOrders(res3.data);\r\n          } catch (err) {\r\n            // todo set error\r\n          }\r\n        }\r\n      } else {\r\n        //fail not because of auth token\r\n        // todo set error\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (searchOrderID === \"\" && searchEmail ===\"\") {\r\n      adminGetUserOrders();\r\n    } \r\n  }, [searchOrderID,searchEmail]);\r\n\r\n  useEffect(() => {\r\n    if (searchOrderID !== \"\" || searchEmail !== \"\") {\r\n      console.log(\"COME in here\");\r\n      let timer = setTimeout(() => {\r\n        //call backend\r\n        adminSearchOrderStatus(searchOrderID, searchEmail);\r\n      }, 300);\r\n      return () => clearTimeout(timer);\r\n    } \r\n  }, [searchOrderID,searchEmail]);\r\n  const displayPurchaseOrder = () => {\r\n    return orders.map((order) => {\r\n      return (\r\n        <div\r\n          className=\"m-3\"\r\n          style={{ border: \"2px solid rgba(0, 0, 0, 0.1)\" }}\r\n          key={order._id}\r\n        >\r\n          <div className=\"mb-2\">\r\n            <span style={{ border: \"1px solid orange\" }}>\r\n              Order ID : {order._id}\r\n            </span>\r\n            <span\r\n              className=\"float-right\"\r\n              style={{ border: \"1px solid orange\" }}\r\n            >\r\n              Status : {order.orderStatus}\r\n            </span>\r\n          </div>\r\n          {order.products.map((p) => {\r\n            return (\r\n              <Fragment key={p._id}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-8\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-4\">\r\n                        <Link to={`../productDetails/${p.product.slug}`}>\r\n                          <Image\r\n                            src={`${process.env.REACT_APP_AWSS3DIR}/${p.product.images[0]}`}\r\n                            preview={false}\r\n                            width={100}\r\n                          />\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"col-md-8\">\r\n                        <div className=\"font-weight-bold\">{p.product.name}</div>\r\n                        <div className=\"font-weight-light\">\r\n                          {p.product.description}\r\n                        </div>\r\n                        <div className=\"font-weight\">\r\n                          Qty:{p.purchaseQuantity}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-4\">\r\n                    <div className=\"font-weight-bold\">\r\n                      ${p.totalPriceWithQuantity}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n          <hr />\r\n          <div className=\"row pb-3\" style={{ clear: \"both\" }}>\r\n            <div className=\"col-md\">\r\n              Update Status :{\" \"}\r\n              <select\r\n                value={order.orderStatus}\r\n                onChange={(event) =>\r\n                  handleOrderStatusChange(order._id, order.orderStatus, event)\r\n                }\r\n              >\r\n                {orderStatuses.map((os) => {\r\n                  return (\r\n                    <option value={os} key={os}>\r\n                      {os}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              Order Total : ${`${order.totalPriceBeforeDiscount}`}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleOrderStatusChange = async (\r\n    order_id,\r\n    initiateOrderStatus,\r\n    event\r\n  ) => {\r\n    if (typeof window !== \"undefined\") {\r\n      if (\r\n        window.confirm(\r\n          `Updating Status from ${initiateOrderStatus} to ${event.target.value}`\r\n        )\r\n      ) {\r\n        const updatedOrderStatus = event.target.value;\r\n\r\n        // let updatedOrders = [...orders];\r\n        // updatedOrders.forEach((o) => {\r\n        //   if (o._id === order_id) {\r\n        //     o.orderStatus = updatedOrderStatus\r\n        //   }\r\n        //   return o;\r\n        // });\r\n        try {\r\n          await adminUpdateOrderStatusFn(order_id, updatedOrderStatus, token);\r\n          adminGetUserOrders();\r\n        } catch (err) {\r\n          if (err.response.data.error === \"J01\") {\r\n            const rfAuthToken = getRefreshToken();\r\n            if (rfAuthToken) {\r\n              try {\r\n                const res2 = await refreshTokenFn(rfAuthToken);\r\n                //update redux state\r\n                dispatch({\r\n                  type: \"REFRESH_TOKEN\",\r\n                  payload: res2.data,\r\n                });\r\n                await adminUpdateOrderStatusFn(\r\n                  order_id,\r\n                  updatedOrderStatus,\r\n                  token\r\n                );\r\n                adminGetUserOrders();\r\n              } catch (err) {\r\n                // todo set error\r\n              }\r\n            }\r\n          } else {\r\n            //fail not because of auth token\r\n            // todo set error\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOrderIDChange = (e) => {\r\n    setSearchOrderID(e.target.value);\r\n  };\r\n\r\n  const handleEmailChange = (e) => {\r\n    setSearchEmail(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\">\r\n        <AdminSideBar />\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <div>\r\n          <div className=\"col-md-6 border float-left\">\r\n            <div className=\"form-inline\">\r\n              Search By Order ID :\r\n              <input\r\n                type=\"search\"\r\n                value={searchOrderID}\r\n                className=\"form-control form-control-sm ml-2\"\r\n                onChange={handleOrderIDChange}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6 border float-right\">\r\n          <div className=\"form-inline\">\r\n            Search By Email :{\" \"}\r\n            <input\r\n              type=\"search\"\r\n              value={searchEmail}\r\n              className=\"form-control form-control-sm ml-2\"\r\n              onChange={handleEmailChange}\r\n            />{\" \"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ clear: \"both\" }}>{displayPurchaseOrder()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\Cart.js",["352","353","354","355"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteSingleCartItemFn,\r\n  updateCartQuantityFn,\r\n} from \"../functions/cart\";\r\nimport { Image } from \"antd\";\r\nimport getRefreshToken from \"../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../functions/auth\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst Cart = () => {\r\n  const { cart, user } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  //state\r\n  const [promoCode, setPromoCode] = useState(\"\"); //todo\r\n  const [discount, setDiscount] = useState(0); //todo\r\n  const [itemsTotal, setItemsTotal] = useState(0);\r\n  const [totalPayable, setTotalPayable] = useState(0); //todo, check and deduct from discount price\r\n\r\n  //User not logged in, get Cart Products from Redux\r\n  const getCartProductFromRedux = () => {\r\n    let isUpdated = false;\r\n    let checkQuantityCart = cart.map((product) => {\r\n      if (product.quantity > product.availableQuantity) {\r\n        isUpdated = true;\r\n        product.quantity = product.availableQuantity;\r\n      }\r\n      return product;\r\n    });\r\n    if (isUpdated) {\r\n      dispatch({\r\n        type: \"UPDATE_CART\",\r\n        payload: checkQuantityCart,\r\n      });\r\n    }\r\n  };\r\n  //User not logged in, get Cart Products from Redux\r\n  useEffect(() => {\r\n    if (!user || !user.email || !user.token) {\r\n      getCartProductFromRedux();\r\n    }\r\n  }, []);\r\n\r\n  //Calculate ItemTotal and Total Payable Price, for both Logged and non-logged in user.\r\n  useEffect(() => {\r\n    //reduce takes in a function as first parameter, 2nd parameter is the starting value,\r\n    //on the first loop current value is 0 thus we use the nextValue price * quantity which is the first array of the cart\r\n    const totalPrice = cart.reduce((currentValue, nextValue) => {\r\n      return currentValue + nextValue.price * nextValue.quantity;\r\n    }, 0);\r\n    setItemsTotal(totalPrice.toFixed(2));\r\n    setTotalPayable(totalPrice.toFixed(2)); //todo\r\n  }, [cart]);\r\n\r\n  const displayCartItemHeader = () => {\r\n    return (\r\n      <>\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-md-6 font-weight-bold\">Products</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Price</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Quantity</div>\r\n          <div className=\"col-md-2 font-weight-bold\">Total Price:</div>\r\n        </div>\r\n        <hr />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const displayCartItemContent = () => {\r\n    return cart.map((c) => {\r\n      return (\r\n        <div key={c._id}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <Link to={`productDetails/${c.slug}`}>\r\n                    <Image\r\n                      src={`${process.env.REACT_APP_AWSS3DIR}/${c.images[0]}`}\r\n                      preview={false}\r\n                      width={100}\r\n                    />\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                  <div className=\"font-weight-bold\">{c.name}</div>\r\n                  <div>{c.description}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-2\">SGD${c.price.toFixed(2)}</div>\r\n            <div className=\"col-md-2\">\r\n              <input\r\n                className=\"form-control-sm mr-sm-2 w-75\"\r\n                type=\"number\"\r\n                value={c.quantity}\r\n                onChange={(event) => handleQuantityChange(event, c)}\r\n              />\r\n              <br />\r\n              <div className=\"font-weight-light font-italic\">\r\n                {c.availableQuantity} Remaining\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              SGD${(c.price * c.quantity).toFixed(2)}\r\n              <br />\r\n              <a\r\n                onClick={() => handleSingleRemoveItem(c)}\r\n                className=\"text-danger\"\r\n              >\r\n                Remove\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleQuantityChange = async (event, singleCartItem) => {\r\n    //Makesure Quantity is at least 1\r\n    let quantity =\r\n      parseInt(event.target.value) < 1 ? 1 : parseInt(event.target.value);\r\n    //check max quanity not more than available quantity in redux\r\n    quantity =\r\n      quantity >= singleCartItem.availableQuantity\r\n        ? singleCartItem.availableQuantity\r\n        : quantity;\r\n    //if user logged in update cart is to update db\r\n    if (user && user.email && user.token) {\r\n      const productObj = {};\r\n      productObj.productID = singleCartItem._id;\r\n      productObj.updateQuantity = quantity;\r\n      try {\r\n        const res = await updateCartQuantityFn(productObj, user.token);\r\n        //update redux\r\n        dispatch({\r\n          type: \"UPDATE_CART\",\r\n          payload: res.data,\r\n        });\r\n      } catch (err) {\r\n        if (err.response.data.error === \"J01\") {\r\n          const rfAuthToken = getRefreshToken();\r\n          if (rfAuthToken) {\r\n            try {\r\n              const res2 = await refreshTokenFn(rfAuthToken);\r\n              //update redux state\r\n              dispatch({\r\n                type: \"REFRESH_TOKEN\",\r\n                payload: res2.data,\r\n              });\r\n              const res3 = await updateCartQuantityFn(\r\n                productObj,\r\n                res2.data.token\r\n              );\r\n              dispatch({\r\n                type: \"UPDATE_CART\",\r\n                payload: res3.data,\r\n              });\r\n            } catch (err) {\r\n              // todo set error\r\n            }\r\n          }\r\n        } else {\r\n          //fail not because of auth token\r\n          // todo set error\r\n        }\r\n      }\r\n    } else {\r\n      //user not logged in, update localstorage and redux state\r\n      if (typeof window !== \"undefined\") {\r\n        if (localStorage.getItem(\"cart\")) {\r\n          let localStorageCart = JSON.parse(localStorage.getItem(\"cart\"));\r\n          localStorageCart.map((lsc) => {\r\n            if (lsc._id === singleCartItem._id) {\r\n              lsc.quantity = quantity;\r\n            }\r\n            return lsc;\r\n          });\r\n          //update localStorage\r\n          localStorage.setItem(\"cart\", JSON.stringify(localStorageCart));\r\n          //update redux\r\n          dispatch({\r\n            type: \"UPDATE_CART\",\r\n            payload: localStorageCart,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSingleRemoveItem = async (c) => {\r\n    if (typeof window !== \"undefined\") {\r\n      //user logged in, delete document from db\r\n      if (user && user.email && user.token) {\r\n        try {\r\n          const res = await deleteSingleCartItemFn(c._id, user.token);\r\n          //update redux\r\n          dispatch({\r\n            type: \"DELETE_SINGLE_CART_ITEM\",\r\n            payload: res.data,\r\n          });\r\n        } catch (err) {\r\n          if (err.response.data.error === \"J01\") {\r\n            const rfAuthToken = getRefreshToken();\r\n            if (rfAuthToken) {\r\n              try {\r\n                const res2 = await refreshTokenFn(rfAuthToken);\r\n                //update redux state\r\n                dispatch({\r\n                  type: \"REFRESH_TOKEN\",\r\n                  payload: res2.data,\r\n                });\r\n                const res3 = await deleteSingleCartItemFn(\r\n                  c._id,\r\n                  res2.data.token\r\n                );\r\n                dispatch({\r\n                  type: \"DELETE_SINGLE_CART_ITEM\",\r\n                  payload: res3.data,\r\n                });\r\n              } catch (err) {\r\n                // todo set error\r\n              }\r\n            }\r\n          } else {\r\n            //fail not because of auth token\r\n            // todo set error\r\n          }\r\n        }\r\n      }\r\n      //user not logged in, update localstorage and redux\r\n      else {\r\n        //remove cart\r\n        const filteredCart = cart.filter((cartItem) => {\r\n          return cartItem._id !== c._id;\r\n        });\r\n        //update localstorage\r\n        localStorage.setItem(\"cart\", JSON.stringify(filteredCart));\r\n        //update redux\r\n        dispatch({\r\n          type: \"UPDATE_CART\",\r\n          payload: filteredCart,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const displayOrderSummary = () => {\r\n    return (\r\n      <div className=\"border p-3\">\r\n        <div className=\"row\">\r\n          <h4 className=\"col\">Order Summary</h4>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">Promo Code</div>\r\n        </div>\r\n        <div className=\"row mt-1\">\r\n          <div className=\"col-md-8\">\r\n            <input\r\n              type=\"text\"\r\n              value={promoCode}\r\n              className=\"form-control mt-1\"\r\n              onChange={handlePromoCode}\r\n              placeholder=\"Promo Code here\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <button type=\"button\" className=\"btn btn-sm btn-outline-dark\">\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row mb-1 mr-1\">\r\n          <div className=\"col\">Items Total : </div>\r\n          <div className=\"ml-auto\">SGD${itemsTotal}</div>\r\n        </div>\r\n        <div className=\"row mr-1 \">\r\n          <div className=\"col\">Discounts:</div>\r\n          <div className=\"ml-auto\">\r\n            <div className=\"text-danger\">-SGD${discount}</div>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row mb-1 mr-1\">\r\n          <div className=\"col\">Total Payable</div>\r\n          <div className=\"ml-auto \">SGD${totalPayable}</div>\r\n        </div>\r\n        <div className=\"row mt-3\">\r\n          <div className=\"col\">\r\n            {/* user exist go to checkout page, else go to login page */}\r\n            {user && user.email && user.token ? (\r\n              <Link\r\n                type=\"button\"\r\n                className=\"btn btn-warning w-100 mr-auto ml-auto text-light\"\r\n                to={{\r\n                  pathname: \"/user/Checkout\",\r\n                }}\r\n                disabled={cart.length === 0}\r\n              >\r\n                Proceed To Checkout\r\n              </Link>\r\n            ) : (\r\n              <Link\r\n                type=\"button\"\r\n                className=\"btn btn-warning w-100 mr-auto ml-auto text-light\"\r\n                to={{\r\n                  pathname: \"/login\",\r\n                  state: {\r\n                    redirectedFrom: \"cart\",\r\n                  },\r\n                }}\r\n                disabled={cart.length === 0}\r\n              >\r\n                Proceed To Checkout\r\n              </Link>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //todo\r\n  const handlePromoCode = () => {};\r\n\r\n  const displayNoItemInCart = () => {\r\n    return (\r\n      <div>\r\n        <h2 className=\"mr-auto ml-auto\">Cart is empty</h2>\r\n        <p>\r\n          Click <Link to={`subcategory/allItems`}>here</Link> to add some\r\n          item\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row mt-4\">\r\n        {cart.length > 0 ? (\r\n          <Fragment>\r\n            <div className=\"col-md-8\">\r\n              {displayCartItemHeader()}\r\n              {displayCartItemContent()}\r\n            </div>\r\n            <div className=\"col-md-4\">{displayOrderSummary()}</div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className=\"ml-auto mr-auto\">{displayNoItemInCart()}</div>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateCategory.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateProduct.js",["356","357","358","359","360"],"import React, { useEffect, useState } from \"react\";\r\nimport { getCategoriesFn } from \"../../functions/category\";\r\nimport { listSubCategoriesByCategoryFn } from \"../../functions/subCategory\";\r\nimport { shippingProvidersFn } from \"../../functions/shipping\";\r\nimport { addProductFn } from \"../../functions/product\";\r\nimport AdminSideBar from \"../../components/nav/AdminSideBar\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBAlert } from 'mdbreact';\r\nimport { Select, Upload, Modal } from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport ImgCrop from \"antd-img-crop\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\n\r\n//for preview function\r\nconst getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n//convert dataURL to file. This function will be called when new images is updated.\r\nconst dataURLtoFile = (dataurl, filename) => {\r\n\r\n    var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]),\r\n        n = bstr.length,\r\n        u8arr = new Uint8Array(n);\r\n\r\n    while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n\r\n    return new File([u8arr], filename, { type: mime });\r\n}\r\n//Initial State for form data to Server\r\nconst initialState = {\r\n    name: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    availableQuantity: \"\",\r\n    sold: \"\",\r\n    images: {},\r\n    ratings: [],\r\n    color: [],\r\n    category: \"\",\r\n    subCategories: [],\r\n    brand: \"\",\r\n    shippingProvider: [],\r\n}\r\n//database categories, subcategories on selected category and all shipping provider\r\nconst initialLoadDataState = {\r\n    loadCategories: [],\r\n    loadSubCategoriesByCategory: [],\r\n    loadShippingProvider: []\r\n}\r\n//Initial State for antdesign image upload\r\nconst initialImageState = {\r\n    previewVisible: false,\r\n    previewImage: '',\r\n    previewTitle: '',\r\n    fileList: [\r\n    ]\r\n}\r\n\r\nconst CreateProduct = () => {\r\n\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    //form data state to push to server\r\n    const [formData, setFormData] = useState(initialState);\r\n    const { name, description, price, availableQuantity, sold, images, ratings, color, category, subCategories, brand, shippingProvider } = formData;\r\n    //database state\r\n    const [loadData, setLoadData] = useState(initialLoadDataState);\r\n    const { loadCategories, loadSubCategoriesByCategory, loadShippingProvider } = loadData;\r\n    //for ant design upload image\r\n    const [imageState, setImageState] = useState(initialImageState);\r\n\r\n    //fetch all database's shipping providers and set to loadData state\r\n    const getShippingProviders = async () => {\r\n        const res = await shippingProvidersFn();\r\n        setLoadData(prevLoadData => ({\r\n            ...prevLoadData, loadShippingProvider: res.data\r\n        }))\r\n    }\r\n    //fetch all database's categories and set to loadData state\r\n    const getCategories = async () => {\r\n        const res = await getCategoriesFn();\r\n        setLoadData(prevLoadData => ({\r\n            ...prevLoadData, loadCategories: res.data\r\n        }))\r\n    };\r\n    //update successful or fail response from backend\r\n    const [response, setResponse] = useState({\r\n        message: \"\",\r\n        css: null,\r\n    });\r\n    const { message, css } = response;\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n        getShippingProviders();\r\n    }, []);\r\n\r\n    //create product form\r\n    const createProductForm = () => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <MDBCol><p className=\"h4 py-4\">Create Product</p></MDBCol>\r\n                <MDBInput\r\n                    label=\"name\"\r\n                    outline\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    autoFocus\r\n                />\r\n                <MDBInput\r\n                    label=\"description\"\r\n                    outline\r\n                    type=\"textarea\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={handleChange}\r\n                />\r\n                <MDBInput\r\n                    label=\"price\"\r\n                    outline\r\n                    type=\"number\"\r\n                    name=\"price\"\r\n                    value={price}\r\n                    onChange={handleChange}\r\n                />\r\n                <MDBInput\r\n                    label=\"availableQuantity\"\r\n                    outline\r\n                    type=\"number\"\r\n                    name=\"availableQuantity\"\r\n                    value={availableQuantity}\r\n                    onChange={handleChange}\r\n                />\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    className=\"w-100\"\r\n                    placeholder=\"Select Available Shipping Providers\"\r\n                    value={shippingProvider}\r\n                    onChange={shippingProviderData => setFormData({ ...formData, shippingProvider: shippingProviderData })}\r\n                >\r\n                    {loadShippingProvider.map((sp) => {\r\n                        return <Select.Option key={sp._id} value={sp._id}>{sp.name}</Select.Option>\r\n                    })}\r\n                </Select>\r\n                <br /><br />\r\n                <select\r\n                    className=\"custom-select w-100\"\r\n                    name=\"category\"\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">Select A Category</option>\r\n                    {loadCategories.map(c => {\r\n                        return <option key={c._id} value={c._id}>{c.name}</option>\r\n                    })}\r\n                </select>\r\n                <br /><br />\r\n                {loadSubCategoriesByCategory && loadSubCategoriesByCategory.length > 0 &&\r\n                    (\r\n                        <>\r\n                            <Select\r\n                                mode=\"multiple\"\r\n                                className=\"w-100\"\r\n                                placeholder=\"Select Sub Categories\"\r\n                                value={subCategories}\r\n                                onChange={subData => setFormData({ ...formData, subCategories: subData })}\r\n                            >\r\n                                {loadSubCategoriesByCategory.map(lsc => {\r\n                                    return <Select.Option key={lsc._id} value={lsc._id}>{lsc.name}</Select.Option>\r\n                                })}\r\n                            </Select>\r\n                            <br /><br />\r\n                        </>)}\r\n                <MDBRow>\r\n                    <MDBCol size=\"4\" ><MDBBtn color=\"light\" disabled={!(name && price && availableQuantity && category)} type=\"submit\">Create Product</MDBBtn></MDBCol>\r\n                    <MDBAlert color={css}>{message}</MDBAlert>\r\n                </MDBRow>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        //set multi part form data request\r\n        let formDataReq = new FormData();\r\n        formDataReq.append(\"name\", name);\r\n        formDataReq.append(\"description\", description);\r\n        formDataReq.append(\"price\", price);\r\n        formDataReq.append(\"availableQuantity\", availableQuantity);\r\n        formDataReq.append(\"category\", category);\r\n        formDataReq.append(\"subCategories\", subCategories);\r\n        formDataReq.append(\"shippingProvider\", shippingProvider);\r\n\r\n        imageState.fileList.forEach((fileListItem, index) => {\r\n            console.log(fileListItem);\r\n            let imageFileName = fileListItem.name + index + Math.floor(Date.now() / 1000); // imageFileName = imagename +timestamp\r\n            let imageFileBase64 = fileListItem.url; //image data in base64, use preview which give a better quality\r\n            let fileExtension = imageFileBase64.substring(\"data:image/\".length, imageFileBase64.indexOf(\";base64\"));//image extension\r\n            let file = dataURLtoFile(imageFileBase64, imageFileName + \".\" + fileExtension);//Convert imageData in base64 to image file format. The 1st parameter is the base64 string, second parameter is the filename\r\n            formDataReq.append(\"images\", file);\r\n        });\r\n\r\n        //clear all state to when success to allow next product to be added\r\n        try {\r\n            const res = await addProductFn(formDataReq, user.token);\r\n            setFormData(initialState);\r\n            setLoadData(initialLoadDataState);\r\n            setImageState(initialImageState);\r\n            getCategories();\r\n            getShippingProviders();\r\n            setResponse({ ...response, message: res.data, css: \"success\" });\r\n\r\n        } catch (err) {\r\n            if (err.response.data.error === \"J01\") {\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await addProductFn(formDataReq, res2.data.token);\r\n                        setFormData(initialState);\r\n                        setLoadData(initialLoadDataState);\r\n                        setImageState(initialImageState);\r\n                        getCategories();\r\n                        getShippingProviders();\r\n                        setResponse({ ...response, message: res3.data, css: \"success\" });\r\n                    } catch (err) {\r\n                        setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                    }\r\n                }\r\n            } else { //fail not because of auth token\r\n                setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = async e => {\r\n        //if category was changed, clear subcategories and get subcategories based on the changed selected category\r\n        if (e.target.name === \"category\") {\r\n            if (e.target.value === \"\") {\r\n                setFormData({ ...formData, subCategories: [], category: e.target.value })\r\n                setLoadData({ ...loadData, loadSubCategoriesByCategory: [] });\r\n            } else {\r\n                setFormData({ ...formData, subCategories: [], category: e.target.value })\r\n                const res = await listSubCategoriesByCategoryFn(e.target.value);\r\n                setLoadData({ ...loadData, loadSubCategoriesByCategory: res.data });\r\n            }\r\n        } else {\r\n            setFormData({ ...formData, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const handleModalCancel = () => {\r\n        return setImageState({ ...imageState, previewVisible: false })\r\n    }\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setImageState({\r\n            ...imageState,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n        })\r\n    };\r\n\r\n    const handleImageChange = async (data) => {\r\n        const reader = new FileReader();\r\n        //onload takes a call back function, e.target.result will be the result return by readAsDataURL\r\n        reader.onload = e => {\r\n            data.file.url = e.target.result;\r\n            return setImageState({\r\n                ...imageState,\r\n                fileList: data.fileList\r\n            })\r\n        } //end onload\r\n        reader.readAsDataURL(data.file.originFileObj);\r\n    };\r\n    //upload button icon\r\n    const uploadButton = () => {\r\n        return <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Upload</div>\r\n        </div>\r\n    }\r\n    //dummyRequest for that always return ok\r\n    const dummyRequest = ({ file, onSuccess }) => {\r\n        setTimeout(() => {\r\n            onSuccess(\"ok\");\r\n        }, 0);\r\n    };\r\n\r\n    const uploadImageForm = () => {\r\n        return (\r\n            <div className=\"col-centered\">\r\n                <ImgCrop rotate>\r\n                    <Upload\r\n                        customRequest={dummyRequest} //always return ok, not exactly sure what is this\r\n                        listType=\"picture-card\"\r\n                        fileList={imageState.fileList}\r\n                        onPreview={handlePreview}\r\n                        onChange={handleImageChange}\r\n                    >\r\n                        {imageState.fileList.length >= 8 ? null : uploadButton()}\r\n                    </Upload>\r\n                </ImgCrop>\r\n                <Modal\r\n                    visible={imageState.previewVisible}\r\n                    // title={imageState.previewTitle}\r\n                    footer={null}\r\n                    onCancel={handleModalCancel}\r\n                >\r\n                    <img alt=\"example\" style={{ width: '100%' }} src={imageState.previewImage} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    //render UI\r\n    return (<div className=\"row\">\r\n        <div className=\"col-md-2\">\r\n            <AdminSideBar />\r\n        </div>\r\n        <div className=\"col-md-10\">\r\n            <MDBCard className=\"p-3 mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8\">\r\n                        {createProductForm()}\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        {uploadImageForm()}\r\n                    </div>\r\n                </div>\r\n            </MDBCard>\r\n        </div>\r\n\r\n    </div>);\r\n}\r\n\r\nexport default CreateProduct;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\Footer.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\Header.js",["361"],"import React, { useState, useEffect } from \"react\";\r\nimport Logo from \"../../Images/FF.png\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { logoutFn } from \"../../functions/auth\";\r\nimport { listSubCategoriesByCategoryFn } from \"../../functions/subCategory\";\r\nimport { getCategoriesFn } from \"../../functions/category\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Badge, Menu } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  UserAddOutlined,\r\n  ShoppingOutlined,\r\n  ShoppingCartOutlined,\r\n} from \"@ant-design/icons\";\r\nimport SearchQuery from \"../SearchQuery\";\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n  //get user and cart state from redux\r\n  const { user, cart } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentSelected, setCurrentSelected] = useState();\r\n\r\n  const [shopItem, setShopItem] = useState([]);\r\n\r\n  const getShopItem = async () => {\r\n    const res = await getCategoriesFn();\r\n    let categoriesObj = {};\r\n    let categoriesArray = [];\r\n    let categories = res.data;\r\n    for (let i = 0; i < categories.length; i++) {\r\n      const res2 = await listSubCategoriesByCategoryFn(categories[i]._id);\r\n      let subcategories = res2.data;\r\n      categoriesObj = { ...categories[i] };\r\n      categoriesObj.subcategories = subcategories;\r\n      categoriesArray.push(categoriesObj);\r\n      categoriesObj = {};\r\n    }\r\n    setShopItem(categoriesArray);\r\n  };\r\n  useEffect(() => {\r\n    getShopItem();\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    const rfToken = localStorage.getItem(\"rfToken\");\r\n    console.log(rfToken);\r\n    try {\r\n      await logoutFn(rfToken);\r\n      dispatch({\r\n        type: \"LOGGED_OUT_USER\",\r\n      });\r\n      history.push(\"/login\");\r\n    } catch (err) {\r\n      //if somehow logout have error still proceed to remove from local storage\r\n      console.log(\"4\");\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"rfToken\");\r\n      history.push(\"/login\");\r\n    }\r\n  };\r\n  const antMenu = () => {\r\n    return (\r\n      <Menu\r\n        selectedKeys={[currentSelected]}\r\n        mode=\"horizontal\"\r\n        className=\"stickyHeader\"\r\n        style={{ backgroundColor: \"#f3fabb\" }}\r\n      >\r\n        <Menu.Item className=\"removeUnderlineHover\" key=\"logo\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src={Logo}\r\n              alt=\"MumsCookyLogo\"\r\n              style={{ height: \"60px\", objectFit: \"cover\" }}\r\n            />\r\n          </Link>\r\n        </Menu.Item>\r\n        <SubMenu\r\n          key=\"shop\"\r\n          className=\"removeUnderlineHover\"\r\n          icon={<ShoppingOutlined />}\r\n          title=\"Shop\"\r\n        >\r\n          {shopItem && shopItem.length > 0 && (\r\n            <Menu.Item key=\"AllItem\">\r\n              <Link to={`/subcategory/allItems`}>All Items</Link>\r\n            </Menu.Item>\r\n          )}\r\n          {shopItem.map((si) => {\r\n            return (\r\n              <Menu.ItemGroup title={si.name} key={si._id}>\r\n                {si.subcategories.map((subsi) => {\r\n                  return (\r\n                    <Menu.Item key={subsi._id}>\r\n                      <Link to={`/subcategory/${subsi.slug}`}>\r\n                        {subsi.name}\r\n                      </Link>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n              </Menu.ItemGroup>\r\n            );\r\n          })}\r\n        </SubMenu>\r\n\r\n        {user && user.token && (\r\n          <SubMenu\r\n            className=\"float-right mt-3 removeUnderlineHover\"\r\n            key=\"username\"\r\n            icon={<UserOutlined />}\r\n            title={user.name || user.email}\r\n          >\r\n            {user && user.role === \"admin\" && (\r\n              <Menu.Item key=\"AdminDashboard\">\r\n                <Link\r\n                  style={{ textDecoration: \"none\", active: \"pink\" }}\r\n                  to=\"/admin/dashboard\"\r\n                >\r\n                  Admin Dashboard\r\n                </Link>\r\n              </Menu.Item>\r\n            )}\r\n            <Menu.Item key=\"MyAccount\">\r\n              <Link\r\n                style={{ textDecoration: \"none\", active: \"pink\" }}\r\n                to=\"/user/profile\"\r\n              >\r\n                My Account\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"MyPurchase\">\r\n              <Link\r\n                style={{ textDecoration: \"none\", active: \"pink\" }}\r\n                to=\"/user/purchaseHistory?status=all\"\r\n              >\r\n                My Purchase\r\n              </Link>\r\n            </Menu.Item>\r\n            {/* <Menu.Item key=\"MyWishlist\">\r\n              <Link\r\n                style={{ textDecoration: \"none\", active: \"pink\" }}\r\n                to=\"/user/wishlist\"\r\n              >\r\n                My Wishlist\r\n              </Link>\r\n            </Menu.Item> */}\r\n\r\n            <Menu.Item key=\"Logout\" onClick={handleLogout}>\r\n              Logout\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        )}\r\n\r\n        {user.token === null && (\r\n          <>\r\n            <Menu.Item\r\n              className=\"float-right mt-3 removeUnderlineHover\"\r\n              key=\"register\"\r\n              icon={<UserAddOutlined />}\r\n            >\r\n              <Link\r\n                to=\"/register\"\r\n                style={{ textDecoration: \"none\", active: \"pink\" }}\r\n              >\r\n                Register\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              className=\"float-right mt-3 removeUnderlineHover\"\r\n              key=\"login\"\r\n              icon={<UserOutlined />}\r\n            >\r\n              <Link\r\n                to=\"/login\"\r\n                style={{ textDecoration: \"none\", active: \"pink\" }}\r\n              >\r\n                Login\r\n              </Link>\r\n            </Menu.Item>\r\n          </>\r\n        )}\r\n\r\n        <Menu.Item\r\n          className=\"float-right mt-3 removeUnderlineHover\"\r\n          key=\"cart\"\r\n          // icon={<ShoppingCartOutlined />}\r\n        >\r\n          <Link to=\"/cart\">\r\n            <Badge count={cart.length}>\r\n              <ShoppingCartOutlined />\r\n            </Badge>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item className=\"float-right mt-3 removeUnderlineHover\">\r\n          <SearchQuery />\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  //Return Layout\r\n  return (\r\n    <>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      {antMenu()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\helper\\setBearerToken.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\UpdateProduct.js",["362","363","364","365","366","367","368"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminSideBar from \"../../components/nav/AdminSideBar\";\r\nimport { MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard } from 'mdbreact';\r\nimport { getProductFn, updateProductFn } from \"../../functions/product\";\r\nimport { getCategoriesFn } from \"../../functions/category\";\r\nimport { listSubCategoriesByCategoryFn } from \"../../functions/subCategory\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { shippingProvidersFn } from \"../../functions/shipping\";\r\nimport { Select, Upload, Modal } from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nimport ImgCrop from \"antd-img-crop\";\r\n\r\n//for preview function\r\nconst getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n//convert dataURL to file. This function will be called when new images is updated.\r\nconst dataURLtoFile = (dataurl, filename) => {\r\n    var arr = dataurl.split(','),\r\n        mime = arr[0].match(/:(.*?);/)[1],\r\n        bstr = atob(arr[1]),\r\n        n = bstr.length,\r\n        u8arr = new Uint8Array(n);\r\n\r\n    while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n\r\n    return new File([u8arr], filename, { type: mime });\r\n}\r\n//Initial State for form data to Server\r\nconst initialState = {\r\n    name: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    availableQuantity: \"\",\r\n    sold: \"\",\r\n    images: [],\r\n    ratings: [],\r\n    color: [],\r\n    category: \"\",\r\n    subCategories: [],\r\n    brand: \"\",\r\n    shippingProvider: [],\r\n}\r\n\r\n//database categories, subcategories on selected category and all shipping provider\r\nconst initialLoadDataState = {\r\n    loadCategories: [],\r\n    loadSubCategoriesByCategory: [],\r\n    loadShippingProviders: []\r\n}\r\n//Product's parent category, subcategory and shipping provider state\r\nconst initialShowDataState = {\r\n    showCategory: \"\",\r\n    showSubCategoriesByCategory: [],\r\n    showShippingProviders: []\r\n}\r\n//Initial State for antdesign image upload\r\nconst initialImageState = {\r\n    previewVisible: false,\r\n    previewImage: '',\r\n    previewTitle: '',\r\n    fileList: [\r\n    ]\r\n}\r\n\r\nconst UpdateProduct = ({ match, history }) => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    //form data state to push to server\r\n    const [formData, setFormData] = useState(initialState);\r\n    const { name, description, price, availableQuantity, sold, images, ratings, color, category, subCategories, brand, shippingProvider } = formData;\r\n    //database state\r\n    const [loadData, setLoadData] = useState(initialLoadDataState);\r\n    const { loadCategories, loadSubCategoriesByCategory, loadShippingProviders } = loadData;\r\n    //Product state\r\n    const [showData, setShowData] = useState(initialShowDataState);\r\n    const { showCategory, showSubCategoriesByCategory, showShippingProviders } = showData;\r\n    //for ant design upload image\r\n    const [imageState, setImageState] = useState(initialImageState);\r\n    //fetch all database's shipping providers and set to loadData state\r\n    const getShippingProviders = async () => {\r\n        const res = await shippingProvidersFn();\r\n        setLoadData(prevLoadData => ({\r\n            ...prevLoadData, loadShippingProviders: res.data\r\n        }))\r\n    };\r\n    //fetch all database's categories and set to loadData state\r\n    const getCategories = async () => {\r\n        const res = await getCategoriesFn();\r\n        setLoadData(prevLoadData => ({ ...prevLoadData, loadCategories: res.data }));\r\n    }\r\n    //fetch all database's categories on selected category and set to loadData state\r\n    const getSubCategoriesByCategory = async categoryID => {\r\n        try {\r\n            const subCategoriesRes = await listSubCategoriesByCategoryFn(categoryID);\r\n            setLoadData(prevLoadData => ({ ...prevLoadData, loadSubCategoriesByCategory: subCategoriesRes.data }));\r\n        } catch (err) {\r\n            toast.error(err.response.data.error);\r\n        }\r\n    }\r\n    //get current product data \r\n    const getProduct = async () => {\r\n        try {\r\n            const res = await getProductFn(match.params.slug);\r\n            //only retrieve IDs for subcategory, shipping provider which will be easier to update on backend\r\n            let subCategoriesIDs = res.data.subCategories.map(sc => sc._id);\r\n            let shippingProviderIDs = res.data.shippingProvider.map(sp => sp._id);\r\n            setFormData(prevState => ({\r\n                ...prevState,\r\n                name: res.data.name,\r\n                description: res.data.description,\r\n                price: res.data.price,\r\n                availableQuantity: res.data.availableQuantity,\r\n                sold: res.data.sold,\r\n                images: res.data.images,\r\n                ratings: res.data.ratings,\r\n                color: res.data.color,\r\n                category: res.data.category._id,\r\n                subCategories: subCategoriesIDs,\r\n                brand: res.data.brand,\r\n                shippingProvider: shippingProviderIDs,\r\n            })\r\n            );\r\n            //Displaying product images, by setting Imagestate require uid, name, status, url in each fileList object\r\n            let fileListArray = [];\r\n            let fileListObj = {};\r\n            res.data.images.forEach(async (image, index) => {\r\n                fileListObj.uid = index;\r\n                fileListObj.name = image;\r\n                fileListObj.status = \"done\";\r\n                fileListObj.url = `${process.env.REACT_APP_AWSS3DIR}/${image}`;\r\n                fileListArray.push(fileListObj);\r\n                fileListObj = {};\r\n            });\r\n            setImageState({\r\n                ...imageState,\r\n                fileList: fileListArray\r\n            });\r\n            //Display product category, subcategories and shipping Provider and set to showData state which shows the multiselect and select component\r\n            let shippingProviderArray = [];\r\n            res.data.shippingProvider.map(sp => {\r\n                return shippingProviderArray.push(sp._id);\r\n            });\r\n            let subCategoriesArray = [];\r\n            res.data.subCategories && res.data.subCategories.length > 0 && res.data.subCategories.map(sc => {\r\n                return subCategoriesArray.push(sc._id);\r\n            })\r\n            setShowData({\r\n                ...showData,\r\n                showShippingProviders: shippingProviderArray,\r\n                showCategory: res.data.category,\r\n                showSubCategoriesByCategory: subCategoriesArray\r\n            });\r\n            //load other subcategories base on existing category\r\n            getSubCategoriesByCategory(res.data.category._id);\r\n        } catch (err) {\r\n            toast.error(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getShippingProviders();\r\n    }, []);\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n    useEffect(() => {\r\n        getProduct();\r\n    }, []);\r\n\r\n    //Update product form exclude antd upload image\r\n    const updateProductForm = () => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <MDBCol><p className=\"h4 py-4\">{`Update ${formData.name}`}</p></MDBCol>\r\n                <MDBInput\r\n                    label=\"name\"\r\n                    outline\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    autoFocus\r\n                />\r\n                <MDBInput\r\n                    label=\"description\"\r\n                    outline\r\n                    type=\"textarea\"\r\n                    name=\"description\"\r\n                    value={description}\r\n                    onChange={handleChange}\r\n                />\r\n                <MDBInput\r\n                    label=\"price\"\r\n                    outline\r\n                    type=\"number\"\r\n                    name=\"price\"\r\n                    value={price}\r\n                    onChange={handleChange}\r\n                />\r\n                <MDBInput\r\n                    label=\"availableQuantity\"\r\n                    outline\r\n                    type=\"number\"\r\n                    name=\"availableQuantity\"\r\n                    value={availableQuantity}\r\n                    onChange={handleChange}\r\n                />\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    allowClear\r\n                    className=\"w-100\"\r\n                    placeholder=\"Select Available Shipping Providers\"\r\n                    value={showShippingProviders}\r\n                    onChange={value => {\r\n                        setShowData({ ...showData, showShippingProviders: value });\r\n                        setFormData({ ...formData, shippingProvider: value });\r\n                    }\r\n                    }\r\n                >\r\n                    {loadShippingProviders.map((sp) => {\r\n                        return <Select.Option key={sp._id} value={sp._id}>{sp.name}</Select.Option>\r\n                    })}\r\n                </Select>\r\n                <br /><br />\r\n                <select\r\n                    className=\"custom-select w-100\"\r\n                    name=\"category\"\r\n                    onChange={handleCategoryChange}\r\n                    value={category}\r\n                >\r\n                    {loadCategories.map(c => {\r\n                        return <option key={c._id} value={c._id}>{c.name}</option>\r\n                    })}\r\n                </select>\r\n                <br /><br />\r\n                {\r\n                    loadSubCategoriesByCategory && loadSubCategoriesByCategory.length > 0 &&\r\n                    (\r\n                        <>\r\n                            <Select\r\n                                mode=\"multiple\"\r\n                                allowClear\r\n                                className=\"w-100\"\r\n                                placeholder=\"Select Sub Categories\"\r\n                                value={showSubCategoriesByCategory}\r\n                                onChange={value => {\r\n                                    setShowData({ ...showData, showSubCategoriesByCategory: value });\r\n                                    setFormData({ ...formData, subCategories: value });\r\n                                }}\r\n                            >\r\n                                {loadSubCategoriesByCategory.map(lsc => {\r\n                                    return <Select.Option key={lsc._id} value={lsc._id}>{lsc.name}</Select.Option>\r\n                                })}\r\n                            </Select>\r\n                            <br /><br />\r\n                        </>)\r\n                }\r\n\r\n                <MDBRow>\r\n                    <MDBCol size=\"4\" ><MDBBtn color=\"light\" disabled={!(name && price && availableQuantity && category)} type=\"submit\">Update</MDBBtn></MDBCol>\r\n                </MDBRow>\r\n            </form >\r\n        );\r\n    }\r\n    //handle change for input type text\r\n    const handleChange = e => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    }\r\n    //handle change for category. when category changed, clear subcategories. Also load sub categories based on changed category.\r\n    const handleCategoryChange = e => {\r\n        //clear Sub Categories\r\n        setFormData({ ...formData, category: e.target.value, subCategories: [] });\r\n        setShowData({ ...showData, showSubCategoriesByCategory: [] });\r\n        //Reload Sub category when category changed\r\n        getSubCategoriesByCategory(e.target.value);\r\n    }\r\n    //on Submit\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        //set multi part form data request\r\n        let formDataReq = new FormData();\r\n        formDataReq.append(\"name\", name);\r\n        formDataReq.append(\"description\", description);\r\n        formDataReq.append(\"price\", price);\r\n        formDataReq.append(\"availableQuantity\", availableQuantity);\r\n        formDataReq.append(\"category\", category);\r\n        formDataReq.append(\"subCategories\", subCategories);\r\n        formDataReq.append(\"shippingProvider\", shippingProvider);\r\n        let oldImagesArray = []; //require to push all old images name which is string to an array before append to \"oldImages\", it will not automatically set as array unlike file datatype\r\n        //loop through imagestate, for newimages convert to file, old images, add to array and push add to formrequest after forEach\r\n        imageState.fileList.forEach((fileListItem, index) => {\r\n            if (fileListItem.dataUrl) {\r\n                let imageFileName = fileListItem.name + index + Math.floor(Date.now() / 1000); // imageFileName = imagename +timestamp\r\n                let imageFileBase64 = fileListItem.dataUrl; //image data in base64, use preview which give a better quality\r\n                let fileExtension = imageFileBase64.substring(\"data:image/\".length, imageFileBase64.indexOf(\";base64\"));//image extension\r\n                let file = dataURLtoFile(imageFileBase64, imageFileName + \".\" + fileExtension);//Convert imageData in base64 to image file format. The 1st parameter is the base64 string, second parameter is the filename\r\n                formDataReq.append(\"newImages\", file);\r\n            } else {\r\n                oldImagesArray.push(fileListItem.name);\r\n            }\r\n        });//end foreach\r\n        formDataReq.append(\"oldImages\", oldImagesArray);\r\n\r\n        //update function to backend\r\n        try {\r\n            const res = await updateProductFn(match.params.slug, formDataReq, user.token);\r\n            history.push(\"/admin/viewAllProducts\");\r\n            toast.success(res.data);\r\n        } catch (err) {\r\n            if (err.response.data.error === \"J01\") {\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await updateProductFn(match.params.slug, formDataReq, res2.data.token);\r\n                        history.push(\"/admin/viewAllProducts\");\r\n                        toast.success(res3.data);\r\n                    } catch (err) { //2nd try still fail\r\n                        toast.error(err.response.data.error);\r\n                    }\r\n                }\r\n            } else { //fail not because of auth token\r\n                toast.error(err.response.data.error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const uploadImageForm = () => {\r\n        return (\r\n            <div className=\"col-centered\">\r\n                <ImgCrop rotate>\r\n                    <Upload\r\n                        customRequest={dummyRequest} //always return ok, not exactly sure what is this\r\n                        listType=\"picture-card\"\r\n                        fileList={imageState.fileList}\r\n                        onPreview={handlePreview}\r\n                        onChange={handleImageChange}\r\n                    >\r\n                        {imageState.fileList.length >= 8 ? null : uploadButton()}\r\n                    </Upload>\r\n                </ImgCrop>\r\n                {/*Modal is for displaying the preview */}\r\n                <Modal\r\n                    visible={imageState.previewVisible}\r\n                    // title={imageState.previewTitle}\r\n                    footer={null}\r\n                    onCancel={handleModalCancel}\r\n                >\r\n                    <img alt={imageState.previewTitle} style={{ width: '100%' }} src={imageState.previewImage} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    };\r\n    //dummyRequest for that always return ok\r\n    const dummyRequest = ({ file, onSuccess }) => {\r\n        setTimeout(() => {\r\n            onSuccess(\"ok\");\r\n        }, 0);\r\n    };\r\n    //on preview clicked\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setImageState({\r\n            ...imageState,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n        })\r\n    };\r\n\r\n    //Adding/Removing image\r\n    const handleImageChange = async (data) => {\r\n        // if new file added, add dataUrl\r\n        if (data.file.originFileObj) {\r\n            const reader = new FileReader();\r\n            //onload takes a call back function, e.target.result will be the result return by readAsDataURL\r\n            reader.onload = e => {\r\n                data.file.dataUrl = e.target.result;\r\n                return setImageState({\r\n                    ...imageState,\r\n                    fileList: data.fileList\r\n                });\r\n            }\r\n            reader.readAsDataURL(data.file.originFileObj);\r\n        }\r\n        //for deleting old files update the state by replacing entire filelist\r\n        return setImageState({\r\n            ...imageState,\r\n            fileList: data.fileList\r\n        });\r\n    };\r\n\r\n    //upload button icon\r\n    const uploadButton = () => {\r\n        return <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Upload</div>\r\n        </div>\r\n    }\r\n\r\n    //for preview cancel\r\n    const handleModalCancel = () => {\r\n        return setImageState({ ...imageState, previewVisible: false })\r\n    }\r\n\r\n    //render UI\r\n    return (<div className=\"row\">\r\n        <div className=\"col-md-2\">\r\n            <AdminSideBar />\r\n        </div>\r\n        <div className=\"col-md-10\">\r\n            <MDBCard className=\"p-3 mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8\">\r\n                        {updateProductForm()}\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        {uploadImageForm()}\r\n                    </div>\r\n                </div>\r\n            </MDBCard>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default UpdateProduct;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\pages\\admin\\CreateSubCategory.js",["369"],"import React, { useEffect, useState } from \"react\";\r\nimport AdminSideBar from \"../../components/nav/AdminSideBar\";\r\nimport { MDBIcon, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody, MDBAlert, MDBModal, MDBModalHeader, MDBModalBody, MDBModalFooter, MDBBadge } from 'mdbreact';\r\nimport { getCategoriesFn } from \"../../functions/category\";\r\nimport { addSubCategoryFn, listSubCategoryFn, deleteSubCategoryFn, updateSubCategoryFn } from \"../../functions/subCategory\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\n\r\nconst CreateSubCategory = () => {\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const [categories, setCategories] = useState([]);\r\n    const [subCategories, setSubCategories] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        parentCategory: \"\",\r\n        subCategory: \"\"\r\n    });\r\n    const { parentCategory, subCategory } = formData;\r\n\r\n    const [updatedFormData, setUpdatedFormData] = useState({\r\n        updatedParentCategory: \"\",\r\n        updatedSubCategory: \"\",\r\n        originalSlug: \"\"\r\n    });\r\n    const { updatedParentCategory, updatedSubCategory, originalSlug } = updatedFormData;\r\n\r\n    const [response, setResponse] = useState({\r\n        message: \"\",\r\n        css: \"\",\r\n    });\r\n    const { message, css } = response;\r\n    const [modalState, setModalState] = useState(false);\r\n\r\n\r\n\r\n    const getCategories = async () => {\r\n        const res = await getCategoriesFn();\r\n        setCategories(res.data);\r\n    }\r\n    const getSubCategories = async () => {\r\n        const res = await listSubCategoryFn();\r\n        setSubCategories(res.data);\r\n    }\r\n    useEffect(() => {\r\n        getCategories();\r\n        getSubCategories();\r\n    }, []);\r\n    const createSubCategoryForm = () => {\r\n        return (<form onSubmit={handleSubmit}>\r\n            <MDBCol><p className=\"h4 py-4\">SubCategory</p></MDBCol>\r\n            <select className=\"browser-default custom-select w-50\" name=\"parentCategory\" onChange={handleChange} value={parentCategory}>\r\n                <option value=\"\">Choose you option</option>\r\n                {categories.map(category => {\r\n                    return <option\r\n                        key={category._id}\r\n                        value={category._id}>\r\n                        {category.name}\r\n                    </option>\r\n                })}\r\n            </select>\r\n            <MDBInput\r\n                label=\"Sub Category Name\"\r\n                outline\r\n                className=\"w-50\"\r\n                type=\"text\"\r\n                name=\"subCategory\"\r\n                value={subCategory}\r\n                onChange={handleChange}\r\n                autoFocus\r\n            />\r\n            <MDBRow>\r\n                <MDBCol size=\"4\" ><MDBBtn color=\"light\" disabled={!(subCategory && parentCategory)} type=\"submit\">Create SubCategory</MDBBtn></MDBCol>\r\n               \r\n                    <MDBAlert color={css}>{message}</MDBAlert>\r\n                \r\n            </MDBRow>\r\n        </form>)\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const res = await addSubCategoryFn(subCategory, parentCategory, user.token);\r\n            setResponse({ ...response, message: res.data, css: \"success\" });\r\n            setFormData({\r\n                parentCategory: \"\",\r\n                subCategory: \"\"\r\n            });\r\n            getSubCategories();//render subcategories\r\n        }\r\n        catch (err) {\r\n            if (err.response.data.error === \"J01\") { //retry once\r\n                //get Refresh Token from local storage\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await addSubCategoryFn(subCategory, parentCategory, res2.data.token);\r\n                        setResponse({ ...response, message: res3.data, css: \"success\" });\r\n                        setFormData({\r\n                            parentCategory: \"\",\r\n                            subCategory: \"\"\r\n                        });\r\n                        getSubCategories();//render subcategories\r\n                    } catch (err) {//fail second time\r\n                        setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                    }\r\n                } else { //No auth Token\r\n                    setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                }\r\n            } else { //fail not because of auth token\r\n                setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setFormData(\r\n            { ...formData, [e.target.name]: e.target.value }\r\n        );\r\n    }\r\n\r\n    const displaySubCategoriesCard = () => {\r\n        return (\r\n            <MDBRow>\r\n                {subCategories.filter(sc1 => { return sc1.name.includes(subCategory) }).map((sc2) => {\r\n                    return (\r\n                        <MDBCol md=\"4\" key={sc2._id}>\r\n                            <MDBAlert color=\"secondary\">\r\n                                <div className=\"font-italic font-weight-lighter small-font\">{sc2.parentCategory.name}</div>\r\n                                {sc2.name}\r\n                                <MDBIcon\r\n                                    onClick={() => handleSubCategoryDelete(sc2.slug)}\r\n                                    className=\"float-right pt-1 text-danger\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                    far\r\n                                    icon=\"trash-alt\" />\r\n\r\n                                <MDBIcon className=\"float-right pt-1 pr-3 text-warning\"\r\n                                    style={{ cursor: 'pointer' }}\r\n                                    far\r\n                                    icon=\"edit\"\r\n                                    onClick={() => handleToggleOpen(sc2)}\r\n                                />\r\n                                <br />\r\n                            </MDBAlert>\r\n                            <MDBModal isOpen={modalState} toggle={handleToggleClose} modalStyle=\"warning\" backdrop={false}>\r\n                                <MDBModalHeader toggle={handleToggleClose}>Update Subcategory</MDBModalHeader>\r\n                                <MDBModalBody>\r\n                                    <select className=\"browser-default custom-select\" name=\"updatedParentCategory\" onChange={e => setUpdatedFormData({ ...updatedFormData, [e.target.name]: e.target.value })} value={updatedParentCategory}>\r\n\r\n                                        {categories.map(category2 => {\r\n                                            return <option\r\n                                                key={category2._id}\r\n                                                value={category2._id}>\r\n                                                {category2.name}\r\n                                            </option>\r\n                                        })}\r\n                                    </select>\r\n\r\n                                    <MDBInput\r\n                                        label=\"Subcategory Name\"\r\n                                        outline\r\n                                        type=\"text\"\r\n                                        value={updatedSubCategory}\r\n                                        name=\"updatedSubCategory\"\r\n                                        onChange={e => setUpdatedFormData({ ...updatedFormData, [e.target.name]: e.target.value })}\r\n                                        autoFocus\r\n                                    />\r\n                                </MDBModalBody>\r\n                                <MDBModalFooter>\r\n                                    <MDBBtn color=\"danger\" onClick={handleToggleClose}>Close</MDBBtn>\r\n                                    <MDBBtn color=\"success\" onClick={handleUpdate}>Save changes</MDBBtn>\r\n                                </MDBModalFooter>\r\n                            </MDBModal>\r\n\r\n                        </MDBCol>\r\n                    )\r\n                })}\r\n            </MDBRow>\r\n        )\r\n    }// End displaySubCategoriesCard\r\n\r\n    const handleSubCategoryDelete = async subCategorySlug => {\r\n        try {\r\n            const res = await deleteSubCategoryFn(subCategorySlug, user.token);\r\n            setResponse({ ...response, message: res.data, css: \"success\" });\r\n            getSubCategories();//render sub categories\r\n\r\n        }\r\n        catch (err) {\r\n            if (err.response.data.error === \"J01\") { //retry once\r\n                //get Refresh Token from local storage\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await deleteSubCategoryFn(subCategorySlug, res2.data.token);\r\n                        setResponse({ ...response, message: res3.data, css: \"success\" });\r\n                        getSubCategories();//render sub categories\r\n                    }\r\n                    catch (err) {\r\n                        setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                    }\r\n                }\r\n            } else {\r\n                setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n            }\r\n        }\r\n    }//End handleSubCategoryDelete\r\n\r\n    const handleToggleOpen = sc => {\r\n        setModalState(!modalState);\r\n        setUpdatedFormData({ ...updatedFormData, updatedParentCategory: sc.parentCategory._id, updatedSubCategory: sc.name, originalSlug: sc.slug })\r\n    }\r\n    const handleToggleClose = () => {\r\n        setModalState(!modalState);\r\n    }\r\n\r\n    const handleUpdate = async () => {\r\n        try {\r\n            const res = await updateSubCategoryFn(originalSlug, updatedFormData, user.token);\r\n            setResponse({ ...response, message: res.data, css: \"success\" });\r\n            getSubCategories(); //reload components\r\n        }\r\n        catch (err) {\r\n            if (err.response.data.error === \"J01\") { //retry once\r\n                //get Refresh Token from local storage\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken) {\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        const res3 = await updateSubCategoryFn(originalSlug, updatedFormData, res2.data.token);\r\n                        setResponse({ ...response, message: res3.data, css: \"success\" });\r\n                        getSubCategories(); //reload components\r\n                    }\r\n                    catch (err) {\r\n                        setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                    }\r\n                } else {\r\n                    setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n                }\r\n            } else {\r\n                setResponse({ ...response, message: err.response.data.error, css: \"danger\" });\r\n            }\r\n        }\r\n        setModalState(!modalState);\r\n    }\r\n\r\n    //render UI\r\n    return (<div className=\"row\">\r\n        <div className=\"col-md-2\">\r\n            <AdminSideBar />\r\n        </div>\r\n        <div className=\"col-md-10\">\r\n            <MDBCard className=\"p-3 mt-5\">\r\n                {createSubCategoryForm()}\r\n\r\n                <hr />\r\n                {/* {JSON.stringify(subCategories)} */}\r\n                {/* <FilterQuery searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\r\n                {/* { searchInput()} */}\r\n                <MDBCardBody cascade className=\"center\">\r\n                    {displaySubCategoriesCard()}\r\n                </MDBCardBody>\r\n            </MDBCard>\r\n        </div>\r\n    </div>);\r\n}\r\nexport default CreateSubCategory;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\AdminRoute.js",["370"],"import React, { useEffect, useState } from \"react\";\r\nimport {useDispatch} from  \"react-redux\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport RedirectIfNotSignIn from \"./RedirectIfNotSignIn\"\r\nimport { adminCheckFn } from \"../../functions/admin\";\r\nimport getRefreshToken from \"../../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../../functions/auth\";\r\nconst AdminRoute = ({ ...rest }) => {\r\n    console.log(\"AdminRoute.js\");\r\n    const user = useSelector((state) => {\r\n        console.log(\"Inslude use Selector\");\r\n        return state.user;\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ok, setOk] = useState(false);\r\n\r\n    const adminCheck = async () => {\r\n        try {\r\n            await adminCheckFn(user.token);\r\n            setOk(true);\r\n        }\r\n        catch (err) {\r\n            if (err.response.data.error === \"J01\") {\r\n                //get Refresh Token from local storage\r\n                const rfAuthToken = getRefreshToken();\r\n                if (rfAuthToken === null) { //check if refresh token exist\r\n                    setOk(false);\r\n                }\r\n                else {//refresh token exist, retrieve new refresh token\r\n                    try {\r\n                        const res2 = await refreshTokenFn(rfAuthToken);\r\n                        //update redux state\r\n                        dispatch({\r\n                            type: \"REFRESH_TOKEN\",\r\n                            payload: res2.data\r\n                        });\r\n                        //try with new JWT 2nd time\r\n                        try {\r\n                            await adminCheckFn(res2.data.token);\r\n                            setOk(true);\r\n                        }\r\n                        catch (err) {\r\n                            setOk(false);\r\n                        }\r\n\r\n                    } //error from retrieving refresh token\r\n                    catch (err) {\r\n                        setOk(false);\r\n                    }\r\n                }\r\n            } else { //first call error but not J01\r\n                setOk(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"Admin Route UseEffect\");\r\n        adminCheck();\r\n    }, [user])\r\n\r\n    return ok ? (<Route {...rest} />) : (<RedirectIfNotSignIn />);\r\n}\r\n\r\nexport default AdminRoute;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\CartModal.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\UserRoute.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\auth.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\cart.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\helper\\getRefreshToken.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\LoadingCard.js",["371","372","373"],"import React from \"react\";\r\nimport { MDBIcon, MDBCard } from 'mdbreact';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Skeleton, Card } from 'antd';\r\n\r\nconst LoadingCard = ({ numOfLoadingItems }) => {\r\n    const cards = () => {\r\n        let totalCards = [];\r\n        for (let i = 0; i < numOfLoadingItems; i++) {\r\n            totalCards.push(\r\n                <Card key={i} className=\"col-md-3\">\r\n                    <Skeleton active></Skeleton>\r\n                </Card>\r\n            )\r\n        }\r\n        return totalCards;\r\n    }\r\n    return <div className=\"row pb-5\">{cards()}</div>\r\n}\r\n\r\nexport default LoadingCard;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\product.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\ProductCard.js",["374"],"import React from \"react\";\r\nimport { MDBIcon } from \"mdbreact\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToCartFn } from \"../functions/cart\";\r\nimport getRefreshToken from \"../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../functions/auth\";\r\n\r\nconst ProductCard = ({ handleDelete, products, user }) => {\r\n  const dispatch = useDispatch();\r\n  const card = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        {products.map((p) => {\r\n          console.log(p);\r\n          return (\r\n            <div\r\n              className=\"col-md-3 mb-3 d-flex align-items-stretch\"\r\n              key={p._id}\r\n            >\r\n              {/* <div className=\"card\" style={{ height: \"26rem\" }}> */}\r\n              <div className=\"card\">\r\n                <div className=\"view overlay\">\r\n                  {/* <div> */}\r\n                  {/* image here */}\r\n                  <Link to={`/productDetails/${p.slug}`}>\r\n                    <img\r\n                      // style={{ height: '10rem' }}\r\n                      src={`${process.env.REACT_APP_AWSS3DIR}/${p.images[0]}`}\r\n                      style={{ height: \"15rem\", objectFit: \"cover\" }}\r\n                      className=\"card-img-top\"\r\n                      alt=\"\"\r\n                    ></img>\r\n                  </Link>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"font-weight-bolder\">{p.name}</div>\r\n                    <div className=\"deep-orange-text\">\r\n                      ${p.price.toFixed(2)}\r\n                    </div>\r\n                    <div\r\n                      className=\"font-weight-light\"\r\n                      style={{ fontSize: \"12px\" }}\r\n                    >\r\n                      {p.description && p.description.length > 30\r\n                        ? `${p.description.substring(0, 25)}...`\r\n                        : p.description}\r\n                    </div>\r\n                    <div className=\"mt-1\">\r\n                      {/* <span className=\"float-left mr-2 block\">\r\n                        <MDBIcon far icon=\"heart\" />\r\n                      </span> */}\r\n                      {/* <span className=\"block ml-3\">\r\n                        <MDBIcon far icon=\"star\" />\r\n                        <MDBIcon far icon=\"star\" />\r\n                        <MDBIcon far icon=\"star\" />\r\n                        <MDBIcon far icon=\"star\" />\r\n                        <MDBIcon far icon=\"star\" />\r\n                      </span> */}\r\n                      <span\r\n                        className=\"float-right block mt-1\"\r\n                        style={{ fontSize: \"13px\" }}\r\n                      >\r\n                        {p.sold} sold\r\n                      </span>\r\n                    </div>\r\n                    {user && user.role == \"admin\" && (\r\n                      <div className=\"mt-1\">\r\n                        <MDBIcon\r\n                          onClick={() => handleDelete(p.slug)}\r\n                          className=\"float-right pt-1 text-danger\"\r\n                          style={{ cursor: \"pointer\" }}\r\n                          far\r\n                          icon=\"trash-alt\"\r\n                        />\r\n\r\n                        <Link to={`/admin/updateProduct/${p.slug}`}>\r\n                          <MDBIcon\r\n                            className=\"float-right pt-1 pr-3 text-warning\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            far\r\n                            icon=\"edit\"\r\n                            // onClick={() => handleEdit(p.slug)}\r\n                          />\r\n                        </Link>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {p.availableQuantity && p.availableQuantity > 0 ? (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleAddToCart(p)}\r\n                      className=\"d-block w-100 btn-warning\"\r\n                    >\r\n                      <MDBIcon icon=\"cart-plus\" />\r\n                      Add To Cart\r\n                    </button>\r\n                  ) : (\r\n                    <button\r\n                      type=\"button\"\r\n                      disabled={true}\r\n                      className=\"d-block w-100 btn-warning\"\r\n                    >\r\n                      Sold Out\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  //if user logged in add to DB, else add to local storage\r\n  const handleAddToCart = async (product) => {\r\n    if (typeof window !== \"undefined\") {\r\n      //check window object\r\n      if (user && user.email && user.token) {\r\n        //user logged in\r\n        let productReq = {};\r\n        productReq.productID = product._id;\r\n        productReq.purchaseQuantity = 1;\r\n        try {\r\n          const res = await addToCartFn(productReq, user.token);\r\n          console.log(res);\r\n          //add to redux store for Cart, CartModal and showModalProductReducer\r\n          dispatch({\r\n            type: \"ADD_TO_CART\",\r\n            payload: res.data,\r\n          });\r\n          dispatch({\r\n            type: \"TOGGLE_CARTMODAL\",\r\n            payload: true,\r\n          });\r\n          dispatch({\r\n            type: \"ADD_PRODUCT_TO_MODAL\",\r\n            payload: product,\r\n          });\r\n        } catch (err) {\r\n          console.log(err);\r\n          if (err.response.data.error === \"J01\") {\r\n            const rfAuthToken = getRefreshToken();\r\n            if (rfAuthToken) {\r\n              try {\r\n                const res2 = await refreshTokenFn(rfAuthToken);\r\n                //update redux state\r\n                dispatch({\r\n                  type: \"REFRESH_TOKEN\",\r\n                  payload: res2.data,\r\n                });\r\n                const res3 = await addToCartFn(productReq, res2.data.token);\r\n                //add to redux store for Cart, CartModal and showModalProductReducer\r\n                dispatch({\r\n                  type: \"ADD_TO_CART\",\r\n                  payload: res3.data,\r\n                });\r\n                dispatch({\r\n                  type: \"TOGGLE_CARTMODAL\",\r\n                  payload: true,\r\n                });\r\n                dispatch({\r\n                  type: \"ADD_PRODUCT_TO_MODAL\",\r\n                  payload: product,\r\n                });\r\n              } catch (err) {}\r\n            }\r\n          } else {\r\n            //fail not because of auth token\r\n          }\r\n        }\r\n      } else {\r\n        //user NOT logged in\r\n        let cart = [];\r\n        if (localStorage.getItem(\"cart\")) {\r\n          cart = JSON.parse(localStorage.getItem(\"cart\"));\r\n        }\r\n        //add quantity to product\r\n        product.quantity = 1;\r\n        //check if product exist in cart, if exist append the quantity, else push as a new array\r\n        if (cart.length === 0) {\r\n          cart.push({\r\n            ...product,\r\n          });\r\n        } else {\r\n          let itemExist = false;\r\n          for (let i = 0; i < cart.length; i++) {\r\n            if (cart[i]._id === product._id) {\r\n              cart[i].quantity += 1;\r\n              itemExist = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!itemExist) {\r\n            //if item not found after forloop, push to storage\r\n            cart.push({\r\n              ...product,\r\n            });\r\n          }\r\n        }\r\n        localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n        //add to redux store for Cart, CartModal and showModalProductReducer\r\n        dispatch({\r\n          type: \"ADD_TO_CART\",\r\n          payload: cart,\r\n        });\r\n        dispatch({\r\n          type: \"TOGGLE_CARTMODAL\",\r\n          payload: true,\r\n        });\r\n        dispatch({\r\n          type: \"ADD_PRODUCT_TO_MODAL\",\r\n          payload: product,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  return <div>{card()}</div>;\r\n};\r\n\r\nexport default ProductCard;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\BestSellers.js",["375"],"import React, { useState, useEffect } from \"react\";\r\nimport { MDBCard } from 'mdbreact';\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport LoadingCard from \"../components/LoadingCard\";\r\nimport { getProductsBySearchFilterFn,getProductsCountFn } from \"../functions/product\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Pagination } from \"antd\";\r\n\r\nconst BestSellers = () => {\r\n    const { user } = useSelector((state) => ({ ...state }));\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [productCount, setProductCount] = useState(0);\r\n\r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        const res = await getProductsBySearchFilterFn(\"sold\", \"desc\", page);\r\n        setProducts(res.data);\r\n        setLoading(false);\r\n    }\r\n\r\n    const getProductsCount = async () => {\r\n        const res = await getProductsCountFn();\r\n        setProductCount(res.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, [page]);\r\n\r\n    useEffect(() => {\r\n        getProductsCount();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MDBCard className=\"p-3 mt-5\">\r\n                <h4 className=\"text-center p-3 font-weight-bold display-4\">Best Selling Fruits</h4>\r\n                {loading ?\r\n                    <div className=\"pt-5\">\r\n                        <LoadingCard\r\n                            numOfLoadingItems={4}\r\n                        />\r\n                    </div> :\r\n                    <div className=\"pt-5\">\r\n                        <ProductCard\r\n                            products={products}\r\n                            user={user}\r\n                        />\r\n                    </div>\r\n                }\r\n                <Pagination\r\n                    className=\"text-center mt-3\"\r\n                    current={page}\r\n                    defaultPageSize={4}\r\n                    total={productCount}\r\n                    onChange={(value) => {\r\n                        setPage(value)\r\n                    }}\r\n                />\r\n            </MDBCard>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default BestSellers;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\user.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\stripe.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\StripeSetupIntent.js",["376","377"],"import React, { useEffect, useState } from \"react\";\r\n\r\n//load Stripe.js script and initializes a Stripe Object, Pass the promise to element\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n//useStripe hook returns a reference to Stripe instance passed to the Elements provider.\r\n//useElement hook safely pass the payment information collected by the Element to the Stripe API, access the component's underlying Element Instance so that we can use it with other Stripe.js method\r\n//Element Provider allow us to use element components and access to the stripe object in any nested component.\r\nimport {\r\n  Elements\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Fragment } from \"react\";\r\nimport StripeSetupIntentAddCard from \"../components/StripeSetupIntentAddCard\";\r\n\r\n//call load stripe outside of function as we do not want to recreate loadStripe object on every render.\r\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\r\n\r\nconst StripeSetupIntent = ({handleCancelForAddCard,isAddNewCardModalVisible,clientSecretForPaymentMethod}) => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Elements stripe={promise}>\r\n          <StripeSetupIntentAddCard\r\n          handleCancelForAddCard={handleCancelForAddCard}\r\n          isAddNewCardModalVisible={isAddNewCardModalVisible}\r\n          clientSecretForPaymentMethod={clientSecretForPaymentMethod}\r\n          />\r\n      </Elements>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default StripeSetupIntent;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\DisplayOrderSummary.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\privateRoutes\\RedirectIfNotSignIn.js",["378"],"import React,{useEffect,useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst RedirectIfNotSignIn = () => {\r\n    const [count, setCount] = useState(5);\r\n    let history = useHistory();\r\n    useEffect(()=>{\r\n        let interval = setInterval(()=>{\r\n            setCount((currentCount)=>--currentCount);\r\n        },1000);\r\n        console.log(interval);\r\n        if(count === 0) {\r\n            history.push(\"/login\");\r\n        }\r\n        return () => {\r\n            console.log(\"inside clear Interval\");\r\n            clearInterval(interval)\r\n        };\r\n        // interval();\r\n    },[count]);\r\n\r\n    //Return Layout\r\n    return (\r\n        <div className=\"container p-5 text-center\">\r\n            <p>Redirecting you to login in {count}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RedirectIfNotSignIn;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\subCategory.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\admin.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\AdminSideBar.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\category.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\shipping.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\functions\\order.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\SearchQuery.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\UserSideBar.js",[],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\nav\\SearchSideBar.js",["379"],"import React, { useEffect, useState } from \"react\";\r\nimport { listSubCategoryFn } from \"../../functions/subCategory\";\r\nimport { Checkbox } from 'antd';\r\nimport StarRatings from \"react-star-ratings\";\r\nimport {shippingProvidersFn} from \"../../functions/shipping\";\r\n\r\nconst SearchSideBar = ({ subCategories, handleCategoryChange, handlePrice, price, setPrice, priceError, handleStarClick, starSelected,handleShippingProviderChange, shippingProviders }) => {\r\n    const [displaySubCategories, setDisplaySubCategories] = useState([]);\r\n    const [displayShippingProviders, setDisplayShippingProviders] = useState([]);\r\n\r\n    const listSubCategory = async () => {\r\n        const res = await listSubCategoryFn();\r\n        setDisplaySubCategories(res.data);\r\n    }\r\n\r\n    const listShippingProvider = async () => {\r\n        const res = await shippingProvidersFn();\r\n        setDisplayShippingProviders(res.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        listSubCategory();\r\n        listShippingProvider();\r\n    }, []);\r\n\r\n    const displayCategories = () => {\r\n        const options = displaySubCategories.map(subcategory => {\r\n            return {\r\n                label: subcategory.name,\r\n                value: subcategory._id\r\n            }\r\n        });\r\n        return (<Checkbox.Group options={options} value={subCategories} onChange={handleCategoryChange}></Checkbox.Group>);\r\n    }\r\n\r\n\r\n    const displayPriceRange = () => {\r\n        return (\r\n            <>\r\n                <input\r\n                    className=\"form-control-sm mr-sm-2\"\r\n                    style={{ width: \"40%\" }}\r\n                    type=\"number\"\r\n                    min={0}\r\n                    placeholder=\"Min\"\r\n                    value={price.min === 0 && price.max === 0 ? \"\" : price.min}\r\n                    onChange={e => {\r\n                        console.log(price);\r\n                        console.log(e);\r\n                        setPrice({\r\n                            ...price,\r\n                            min: e.target.value\r\n                        })\r\n                    }}\r\n                />\r\n             -\r\n                <input\r\n                    className=\"form-control-sm mr-sm-2 float-right\"\r\n                    style={{ width: \"40%\" }}\r\n                    type=\"number\"\r\n                    min={0}\r\n                    placeholder=\"Max\"\r\n                    value={price.min === 0 && price.max === 0 ? \"\" : price.max}\r\n                    onChange={e => {\r\n                        setPrice({\r\n                            ...price,\r\n                            max: e.target.value\r\n                        })\r\n                    }}\r\n                />\r\n                {priceError && <p className=\"text-danger\" style={{fontSize:\"11px\"}}>{priceError}</p>}\r\n                <button type=\"button\" className=\"btn btn-warning btn-sm btn-block\" onClick={handlePrice}>Apply</button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    \r\n\r\n    // const displayStarRating = (numOfStars) => {\r\n    //     return (\r\n    //         <StarRatings\r\n    //             rating={numOfStars}\r\n    //             starRatedColor=\"orange\"\r\n    //             numberOfStars={numOfStars}\r\n    //             starSpacing=\"2px\"\r\n    //             starDimension=\"20px\"\r\n    //         />\r\n    //     )\r\n    // }\r\n\r\n    const displayShippingCheckBox = () => {\r\n        const options = displayShippingProviders.map(shippingProvider=>{\r\n            return {\r\n                label:shippingProvider.name,\r\n                value:shippingProvider._id\r\n            }\r\n        });\r\n        return (<Checkbox.Group options={options} value={shippingProviders} onChange={handleShippingProviderChange}></Checkbox.Group>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-3\">\r\n            <h5>Search Filter</h5>\r\n            <p>Category:</p>\r\n            {displayCategories()}\r\n            <hr />\r\n            <p>Price Range:</p>\r\n            {displayPriceRange()}\r\n            {/* <hr />\r\n            <p className=\"mb-1\">Rating</p>\r\n            \r\n            {[5, 4, 3, 2, 1].map(eachStar => {\r\n                let selectedStarBG = \"\";\r\n                if(starSelected===eachStar) {\r\n                    selectedStarBG = \"grey\";\r\n                }\r\n                return <div key={eachStar}><span>\r\n                    <a\r\n                        onClick={() => handleStarClick(eachStar)}\r\n                        className=\"pb-1\"\r\n                        style={{\r\n                            cursor: \"pointer\",\r\n                            backgroundColor: selectedStarBG\r\n                        }}>\r\n                        {displayStarRating(eachStar)}\r\n                    </a>\r\n                </span></div>\r\n            })} */}\r\n            <hr />\r\n            <p>Shipping</p>\r\n            {displayShippingCheckBox()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchSideBar;","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\CheckoutForm.js",["380","381"],"import React, { useState, useEffect } from \"react\";\r\n//load Stripe.js script and initializes a Stripe Object, Pass the promise to element\r\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\n//useStripe hook returns a reference to Stripe instance passed to the Elements provider.\r\n//useElement hook safely pass the payment information collected by the Element to the Stripe API, access the component's underlying Element Instance so that we can use it with other Stripe.js method\r\n//Element Provider allow us to use element components and access to the stripe object in any nested component.\r\nimport { createPaymentIntentFn } from \"../functions/stripe\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getRefreshToken from \"../helper/getRefreshToken\";\r\nimport { refreshTokenFn } from \"../functions/auth\";\r\n\r\n//import \"./CheckoutForm.css\";\r\nconst cardStyle = {\r\n  style: {\r\n    base: {\r\n      color: \"#32325d\",\r\n      fontFamily: \"Arial, sans-serif\",\r\n      fontSmoothing: \"antialiased\",\r\n      fontSize: \"16px\",\r\n      \"::placeholder\": {\r\n        color: \"#32325d\",\r\n      },\r\n    },\r\n    invalid: {\r\n      color: \"#fa755a\",\r\n      iconColor: \"#fa755a\",\r\n    },\r\n  },\r\n};\r\n\r\nconst CheckoutForm = () => {\r\n  //setup state for stripe element\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const [totalPriceBeforeDiscount, setTotalPriceBeforeDiscount] = useState(0);\r\n  const [stripe_customer_id, setStripe_customer_id] = useState(\"\");\r\n  //useStripe and useElements hook is to access to stripe Elements\r\n  //this 2 method needs to be wrap in strip's Elements\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const { user } = useSelector((state) => {\r\n    return { ...state };\r\n  });\r\n\r\n  const paymentIntent = async () => {\r\n    try {\r\n      const res = await createPaymentIntentFn(user.token);\r\n      console.log(`RES from node!!:${res}`)\r\n      setClientSecret(res.data.clientSecret);\r\n      setTotalPriceBeforeDiscount(res.data.totalPriceBeforeDiscount);\r\n      res.data.stripe_customer_id&&setStripe_customer_id(res.data.stripe_customer_id);\r\n    } catch (err) {\r\n      if (err.response.data.error === \"J01\") {\r\n        const rfAuthToken = getRefreshToken();\r\n        if (rfAuthToken) {\r\n          try {\r\n            const res2 = await refreshTokenFn(rfAuthToken);\r\n            const res3 = await createPaymentIntentFn(res2.data.token);\r\n            setClientSecret(res3.data.clientSecret);\r\n            setTotalPriceBeforeDiscount(res3.data.totalPriceBeforeDiscount);\r\n          } catch (err) {\r\n            setError(err.response.data.error);\r\n          }\r\n        }\r\n      } else {\r\n        setError(err.response.data.error);\r\n      }\r\n    }\r\n  };\r\n\r\n  //get payment intent\r\n  useEffect(() => {\r\n    paymentIntent();\r\n  }, []);\r\n\r\n  //listen on changes on card element\r\n  const handleChange = (event) => {\r\n    console.log(event);\r\n    setDisabled(event.empty); //event.empty is true when page render\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n    //make payment to stripe\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      // const payload = await stripe.confirmCardSetup(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement)\r\n      },\r\n      //customer:stripe_customer_id,\r\n      //setup_future_usage: \"off_session\", //save card details in paymentMethod object\r\n    });\r\n    console.log(payload);\r\n    if (payload.error) {\r\n      setError(`Payment failed ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setProcessing(false);\r\n      setSucceeded(true);\r\n    }\r\n  };\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <div>Applied Promo Code : </div>\r\n      <div>Price Before Discount : ${totalPriceBeforeDiscount}</div>\r\n      <div>Price After Discount : (-)</div>\r\n      <CardElement\r\n        hidePostalCode={true}\r\n        id=\"card-element\"\r\n        options={cardStyle}\r\n        onChange={handleChange}\r\n      />\r\n      <button disabled={processing || disabled || succeeded}>\r\n        <span id=\"button-text\">\r\n          {processing ? (\r\n            <div className=\"spinner\" id=\"spinner\"></div>\r\n          ) : (\r\n            \"Pay now\"\r\n          )}\r\n        </span>\r\n      </button>\r\n      {/* display error */}\r\n      {error && (\r\n        <div className=\"card-error\" role=\"alert\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      {/* show success when payment completed */}\r\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\r\n        Payment Success, see the result in your{\" \"}\r\n        <Link to=\"/user/dashboard\">Dashboard</Link>\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n","C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\StripeSetupIntentAddCard.js",["382"],"import React, { useState, useEffect } from \"react\";\r\n//load Stripe.js script and initializes a Stripe Object, Pass the promise to element\r\n\r\n//useStripe hook returns a reference to Stripe instance passed to the Elements provider.\r\n//useElement hook safely pass the payment information collected by the Element to the Stripe API, access the component's underlying Element Instance so that we can use it with other Stripe.js method\r\n//Element Provider allow us to use element components and access to the stripe object in any nested component.\r\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst cardStyle = {\r\n  style: {\r\n    base: {\r\n      color: \"#32325d\",\r\n      fontFamily: \"Arial, sans-serif\",\r\n      fontSmoothing: \"antialiased\",\r\n      fontSize: \"16px\",\r\n      \"::placeholder\": {\r\n        color: \"#32325d\",\r\n      },\r\n    },\r\n    invalid: {\r\n      color: \"#fa755a\",\r\n      iconColor: \"#fa755a\",\r\n    },\r\n  },\r\n};\r\n\r\nconst StripeSetupIntentAddCard = ({\r\n  handleCancelForAddCard,\r\n  isAddNewCardModalVisible,\r\n  clientSecretForPaymentMethod\r\n}) => {\r\n  console.log(\"222IN StripeSetupIntentAddCard isAddNewCardModalVisible: : \" , isAddNewCardModalVisible)\r\n\r\n   //clear card input if exist\r\n   useEffect(()=> {\r\n    console.log(\"###IN StripeSetupIntentAddCard isAddNewCardModalVisible: : \" , isAddNewCardModalVisible);\r\n    if(elements) {\r\n      elements.getElement(CardElement).clear();\r\n    }\r\n  },[handleCancelForAddCard]);\r\n\r\n  //setup state for stripe element\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(true);\r\n\r\n  //useStripe and useElements hook is to access to stripe Elements\r\n  //this 2 method needs to be wrap in strip's Elements\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  \r\n  //listen on changes on card element\r\n  const handleChange = (event) => {\r\n    console.log(event);\r\n    setDisabled(event.empty); //event.empty is true when form is empty, nothing is filled\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setProcessing(true);\r\n    console.log(\"HANDLESUBMITEEEEEEEEEEEEEEEEEEE\")\r\n    //make payment to stripe\r\n    try {\r\n      const payload = await stripe.confirmCardSetup(clientSecretForPaymentMethod, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        },\r\n      });\r\n      if(payload.error) {\r\n        toast.error(payload.error.message);\r\n      }\r\n      console.log(payload);\r\n      setProcessing(false);\r\n      //set modal visible to false\r\n      handleCancelForAddCard();\r\n      //clear card element\r\n      elements.getElement(CardElement).clear();\r\n    } catch (err) {\r\n      console.log(err);\r\n      setProcessing(false);\r\n      //set modal visible to false\r\n      handleCancelForAddCard();\r\n      //clear card element\r\n      elements.getElement(CardElement).clear();\r\n    }\r\n  };\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <CardElement\r\n        hidePostalCode={true}\r\n        id=\"card-element\"\r\n        options={cardStyle}\r\n        onChange={handleChange}\r\n      />\r\n      <button\r\n        disabled={processing || disabled || error}\r\n        style={{\r\n          backgroundColor: \"#5469d4\",\r\n          fontFamily: \"Arial, sans-serif\",\r\n          color: \"#ffffff\",\r\n          borderRadius: \"0 0 4px 4px\",\r\n          border: \"0\",\r\n          padding: \"12px 16px\",\r\n          fontSize: \"16px\",\r\n          fontWeight: \"600\",\r\n          cursor: \"pointer\",\r\n          display: \"block\",\r\n          transition: \"all 0.2s ease\",\r\n          boxShadow: \"0px 4px 5.5px 0px rgba(0, 0, 0, 0.07)\",\r\n          width: \"100%\",\r\n          marginTop: \"15px\",\r\n        }}\r\n      >\r\n        <span id=\"button-text\">\r\n          {processing ? (\r\n            <div className=\"spinner\" id=\"spinner\"></div>\r\n          ) : (\r\n            \"Add Card\"\r\n          )}\r\n        </span>\r\n      </button>\r\n      {error && (\r\n        <div className=\"card-error text-danger\" role=\"alert\">\r\n          {error}\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default StripeSetupIntentAddCard;\r\n",["383","384"],"C:\\Users\\weiji\\Desktop\\MERN_Ecommerce\\React\\src\\components\\NewlyAdded.js",["385"],"import React, { useState, useEffect } from \"react\";\r\nimport { MDBCard } from 'mdbreact';\r\nimport ProductCard from \"./ProductCard\";\r\nimport LoadingCard from \"./LoadingCard\";\r\nimport { getProductsBySearchFilterFn, getProductsCountFn } from \"../functions/product\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Pagination } from \"antd\";\r\n\r\nconst NewlyAdded = () => {\r\n    const { user } = useSelector((state) => ({ ...state }));\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [productCount, setProductCount] = useState(0);\r\n\r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        const res = await getProductsBySearchFilterFn(\"createdAt\", \"desc\", page);\r\n        setProducts(res.data);\r\n        setLoading(false);\r\n    }\r\n\r\n    const getProductsCount = async () => {\r\n        const res = await getProductsCountFn();\r\n        setProductCount(res.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, [page]);\r\n\r\n    useEffect(() => {\r\n        getProductsCount();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MDBCard className=\"p-3 mt-5\">\r\n                <h4 className=\"text-center p-3 font-weight-bold display-4\">Newly Added</h4>\r\n                {loading ?\r\n                    <div className=\"pt-5\">\r\n                        <LoadingCard\r\n                            numOfLoadingItems={4}\r\n                        />\r\n                    </div> :\r\n                    <div className=\"pt-5\">\r\n                        <ProductCard\r\n                            products={products}\r\n                            user={user}\r\n                        />\r\n                    </div>\r\n                }\r\n                <Pagination\r\n                    className=\"text-center mt-3\"\r\n                    current={page}\r\n                    defaultPageSize={4}\r\n                    total={productCount}\r\n                    onChange={(value) => {\r\n                        setPage(value)\r\n                    }}\r\n                />\r\n            </MDBCard>\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default NewlyAdded;",{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","replacedBy":"389"},{"ruleId":"390","severity":1,"message":"391","line":139,"column":6,"nodeType":"392","endLine":139,"endColumn":16,"suggestions":"393"},{"ruleId":"390","severity":1,"message":"394","line":31,"column":8,"nodeType":"392","endLine":31,"endColumn":14,"suggestions":"395"},{"ruleId":"396","severity":1,"message":"397","line":96,"column":11,"nodeType":"398","messageId":"399","endLine":96,"endColumn":28},{"ruleId":"390","severity":1,"message":"394","line":43,"column":8,"nodeType":"392","endLine":43,"endColumn":14,"suggestions":"400"},{"ruleId":"390","severity":1,"message":"401","line":61,"column":8,"nodeType":"392","endLine":61,"endColumn":10,"suggestions":"402"},{"ruleId":"390","severity":1,"message":"403","line":20,"column":8,"nodeType":"392","endLine":20,"endColumn":14,"suggestions":"404"},{"ruleId":"396","severity":1,"message":"405","line":8,"column":3,"nodeType":"398","messageId":"399","endLine":8,"endColumn":24},{"ruleId":"396","severity":1,"message":"406","line":13,"column":10,"nodeType":"398","messageId":"399","endLine":13,"endColumn":19},{"ruleId":"396","severity":1,"message":"407","line":58,"column":11,"nodeType":"398","messageId":"399","endLine":58,"endColumn":15},{"ruleId":"396","severity":1,"message":"408","line":95,"column":10,"nodeType":"398","messageId":"399","endLine":95,"endColumn":38},{"ruleId":"396","severity":1,"message":"409","line":95,"column":40,"nodeType":"398","messageId":"399","endLine":95,"endColumn":71},{"ruleId":"396","severity":1,"message":"410","line":97,"column":10,"nodeType":"398","messageId":"399","endLine":97,"endColumn":15},{"ruleId":"396","severity":1,"message":"411","line":97,"column":17,"nodeType":"398","messageId":"399","endLine":97,"endColumn":25},{"ruleId":"390","severity":1,"message":"412","line":233,"column":6,"nodeType":"392","endLine":233,"endColumn":8,"suggestions":"413"},{"ruleId":"390","severity":1,"message":"414","line":236,"column":6,"nodeType":"392","endLine":236,"endColumn":8,"suggestions":"415"},{"ruleId":"390","severity":1,"message":"416","line":240,"column":6,"nodeType":"392","endLine":240,"endColumn":8,"suggestions":"417"},{"ruleId":"396","severity":1,"message":"418","line":339,"column":13,"nodeType":"398","messageId":"399","endLine":339,"endColumn":16},{"ruleId":"396","severity":1,"message":"419","line":364,"column":19,"nodeType":"398","messageId":"399","endLine":364,"endColumn":23},{"ruleId":"396","severity":1,"message":"418","line":401,"column":13,"nodeType":"398","messageId":"399","endLine":401,"endColumn":16},{"ruleId":"396","severity":1,"message":"419","line":426,"column":19,"nodeType":"398","messageId":"399","endLine":426,"endColumn":23},{"ruleId":"420","severity":1,"message":"421","line":454,"column":53,"nodeType":"422","messageId":"423","endLine":454,"endColumn":55},{"ruleId":"396","severity":1,"message":"418","line":470,"column":15,"nodeType":"398","messageId":"399","endLine":470,"endColumn":18},{"ruleId":"390","severity":1,"message":"424","line":92,"column":6,"nodeType":"392","endLine":92,"endColumn":12,"suggestions":"425"},{"ruleId":"390","severity":1,"message":"426","line":26,"column":6,"nodeType":"392","endLine":26,"endColumn":12,"suggestions":"427"},{"ruleId":"390","severity":1,"message":"428","line":31,"column":6,"nodeType":"392","endLine":31,"endColumn":48,"suggestions":"429"},{"ruleId":"396","severity":1,"message":"430","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"431","line":1,"column":28,"nodeType":"398","messageId":"399","endLine":1,"endColumn":36},{"ruleId":"390","severity":1,"message":"394","line":32,"column":8,"nodeType":"392","endLine":32,"endColumn":14,"suggestions":"432"},{"ruleId":"390","severity":1,"message":"433","line":60,"column":8,"nodeType":"392","endLine":60,"endColumn":10,"suggestions":"434"},{"ruleId":"390","severity":1,"message":"428","line":40,"column":8,"nodeType":"392","endLine":40,"endColumn":59,"suggestions":"435"},{"ruleId":"396","severity":1,"message":"436","line":4,"column":3,"nodeType":"398","messageId":"399","endLine":4,"endColumn":9},{"ruleId":"396","severity":1,"message":"437","line":5,"column":3,"nodeType":"398","messageId":"399","endLine":5,"endColumn":9},{"ruleId":"396","severity":1,"message":"438","line":6,"column":3,"nodeType":"398","messageId":"399","endLine":6,"endColumn":11},{"ruleId":"396","severity":1,"message":"439","line":15,"column":10,"nodeType":"398","messageId":"399","endLine":15,"endColumn":15},{"ruleId":"396","severity":1,"message":"440","line":40,"column":17,"nodeType":"398","messageId":"399","endLine":40,"endColumn":21},{"ruleId":"396","severity":1,"message":"441","line":50,"column":5,"nodeType":"398","messageId":"399","endLine":50,"endColumn":9},{"ruleId":"396","severity":1,"message":"442","line":56,"column":5,"nodeType":"398","messageId":"399","endLine":56,"endColumn":12},{"ruleId":"396","severity":1,"message":"443","line":57,"column":5,"nodeType":"398","messageId":"399","endLine":57,"endColumn":10},{"ruleId":"396","severity":1,"message":"444","line":58,"column":5,"nodeType":"398","messageId":"399","endLine":58,"endColumn":13},{"ruleId":"396","severity":1,"message":"445","line":60,"column":5,"nodeType":"398","messageId":"399","endLine":60,"endColumn":10},{"ruleId":"396","severity":1,"message":"446","line":65,"column":5,"nodeType":"398","messageId":"399","endLine":65,"endColumn":16},{"ruleId":"396","severity":1,"message":"447","line":66,"column":5,"nodeType":"398","messageId":"399","endLine":66,"endColumn":23},{"ruleId":"396","severity":1,"message":"448","line":67,"column":5,"nodeType":"398","messageId":"399","endLine":67,"endColumn":17},{"ruleId":"396","severity":1,"message":"449","line":68,"column":5,"nodeType":"398","messageId":"399","endLine":68,"endColumn":29},{"ruleId":"396","severity":1,"message":"450","line":69,"column":5,"nodeType":"398","messageId":"399","endLine":69,"endColumn":16},{"ruleId":"396","severity":1,"message":"451","line":70,"column":5,"nodeType":"398","messageId":"399","endLine":70,"endColumn":18},{"ruleId":"396","severity":1,"message":"452","line":71,"column":5,"nodeType":"398","messageId":"399","endLine":71,"endColumn":19},{"ruleId":"396","severity":1,"message":"453","line":72,"column":5,"nodeType":"398","messageId":"399","endLine":72,"endColumn":17},{"ruleId":"396","severity":1,"message":"454","line":73,"column":5,"nodeType":"398","messageId":"399","endLine":73,"endColumn":20},{"ruleId":"396","severity":1,"message":"455","line":74,"column":5,"nodeType":"398","messageId":"399","endLine":74,"endColumn":25},{"ruleId":"396","severity":1,"message":"456","line":75,"column":5,"nodeType":"398","messageId":"399","endLine":75,"endColumn":17},{"ruleId":"396","severity":1,"message":"457","line":76,"column":5,"nodeType":"398","messageId":"399","endLine":76,"endColumn":28},{"ruleId":"390","severity":1,"message":"458","line":119,"column":6,"nodeType":"392","endLine":119,"endColumn":25,"suggestions":"459"},{"ruleId":"460","severity":1,"message":"461","line":144,"column":23,"nodeType":"462","endLine":144,"endColumn":81},{"ruleId":"463","severity":1,"message":"464","line":165,"column":52,"nodeType":"465","messageId":"466","endLine":165,"endColumn":54},{"ruleId":"463","severity":1,"message":"464","line":244,"column":28,"nodeType":"465","messageId":"466","endLine":244,"endColumn":30},{"ruleId":"390","severity":1,"message":"467","line":47,"column":6,"nodeType":"392","endLine":47,"endColumn":13,"suggestions":"468"},{"ruleId":"396","severity":1,"message":"469","line":18,"column":10,"nodeType":"398","messageId":"399","endLine":18,"endColumn":19},{"ruleId":"396","severity":1,"message":"470","line":18,"column":21,"nodeType":"398","messageId":"399","endLine":18,"endColumn":33},{"ruleId":"390","severity":1,"message":"471","line":63,"column":6,"nodeType":"392","endLine":63,"endColumn":29,"suggestions":"472"},{"ruleId":"473","severity":1,"message":"474","line":205,"column":15,"nodeType":"462","endLine":207,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":217,"column":15,"nodeType":"462","endLine":223,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":233,"column":15,"nodeType":"462","endLine":237,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":247,"column":15,"nodeType":"462","endLine":251,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":261,"column":15,"nodeType":"462","endLine":265,"endColumn":16},{"ruleId":"396","severity":1,"message":"475","line":3,"column":10,"nodeType":"398","messageId":"399","endLine":3,"endColumn":17},{"ruleId":"396","severity":1,"message":"476","line":3,"column":19,"nodeType":"398","messageId":"399","endLine":3,"endColumn":26},{"ruleId":"396","severity":1,"message":"477","line":8,"column":10,"nodeType":"398","messageId":"399","endLine":8,"endColumn":24},{"ruleId":"396","severity":1,"message":"478","line":10,"column":10,"nodeType":"398","messageId":"399","endLine":10,"endColumn":14},{"ruleId":"396","severity":1,"message":"479","line":74,"column":11,"nodeType":"398","messageId":"399","endLine":74,"endColumn":21},{"ruleId":"390","severity":1,"message":"480","line":107,"column":6,"nodeType":"392","endLine":107,"endColumn":33,"suggestions":"481"},{"ruleId":"390","severity":1,"message":"482","line":118,"column":6,"nodeType":"392","endLine":118,"endColumn":33,"suggestions":"483"},{"ruleId":"396","severity":1,"message":"484","line":21,"column":21,"nodeType":"398","messageId":"399","endLine":21,"endColumn":33},{"ruleId":"396","severity":1,"message":"485","line":22,"column":20,"nodeType":"398","messageId":"399","endLine":22,"endColumn":31},{"ruleId":"390","severity":1,"message":"486","line":48,"column":6,"nodeType":"392","endLine":48,"endColumn":8,"suggestions":"487"},{"ruleId":"473","severity":1,"message":"474","line":113,"column":15,"nodeType":"462","endLine":116,"endColumn":16},{"ruleId":"396","severity":1,"message":"488","line":75,"column":58,"nodeType":"398","messageId":"399","endLine":75,"endColumn":62},{"ruleId":"396","severity":1,"message":"489","line":75,"column":64,"nodeType":"398","messageId":"399","endLine":75,"endColumn":70},{"ruleId":"396","severity":1,"message":"442","line":75,"column":72,"nodeType":"398","messageId":"399","endLine":75,"endColumn":79},{"ruleId":"396","severity":1,"message":"443","line":75,"column":81,"nodeType":"398","messageId":"399","endLine":75,"endColumn":86},{"ruleId":"396","severity":1,"message":"445","line":75,"column":113,"nodeType":"398","messageId":"399","endLine":75,"endColumn":118},{"ruleId":"396","severity":1,"message":"490","line":30,"column":27,"nodeType":"398","messageId":"399","endLine":30,"endColumn":45},{"ruleId":"396","severity":1,"message":"488","line":83,"column":58,"nodeType":"398","messageId":"399","endLine":83,"endColumn":62},{"ruleId":"396","severity":1,"message":"489","line":83,"column":64,"nodeType":"398","messageId":"399","endLine":83,"endColumn":70},{"ruleId":"396","severity":1,"message":"442","line":83,"column":72,"nodeType":"398","messageId":"399","endLine":83,"endColumn":79},{"ruleId":"396","severity":1,"message":"443","line":83,"column":81,"nodeType":"398","messageId":"399","endLine":83,"endColumn":86},{"ruleId":"396","severity":1,"message":"445","line":83,"column":113,"nodeType":"398","messageId":"399","endLine":83,"endColumn":118},{"ruleId":"396","severity":1,"message":"491","line":89,"column":13,"nodeType":"398","messageId":"399","endLine":89,"endColumn":25},{"ruleId":"390","severity":1,"message":"458","line":181,"column":8,"nodeType":"392","endLine":181,"endColumn":10,"suggestions":"492"},{"ruleId":"396","severity":1,"message":"493","line":3,"column":141,"nodeType":"398","messageId":"399","endLine":3,"endColumn":149},{"ruleId":"390","severity":1,"message":"494","line":63,"column":8,"nodeType":"392","endLine":63,"endColumn":14,"suggestions":"495"},{"ruleId":"396","severity":1,"message":"475","line":2,"column":10,"nodeType":"398","messageId":"399","endLine":2,"endColumn":17},{"ruleId":"396","severity":1,"message":"476","line":2,"column":19,"nodeType":"398","messageId":"399","endLine":2,"endColumn":26},{"ruleId":"396","severity":1,"message":"478","line":3,"column":10,"nodeType":"398","messageId":"399","endLine":3,"endColumn":14},{"ruleId":"463","severity":1,"message":"464","line":66,"column":40,"nodeType":"465","messageId":"466","endLine":66,"endColumn":42},{"ruleId":"390","severity":1,"message":"496","line":30,"column":8,"nodeType":"392","endLine":30,"endColumn":14,"suggestions":"497"},{"ruleId":"396","severity":1,"message":"430","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"431","line":1,"column":28,"nodeType":"398","messageId":"399","endLine":1,"endColumn":36},{"ruleId":"390","severity":1,"message":"403","line":20,"column":7,"nodeType":"392","endLine":20,"endColumn":14,"suggestions":"498"},{"ruleId":"396","severity":1,"message":"499","line":4,"column":8,"nodeType":"398","messageId":"399","endLine":4,"endColumn":19},{"ruleId":"396","severity":1,"message":"500","line":40,"column":10,"nodeType":"398","messageId":"399","endLine":40,"endColumn":28},{"ruleId":"390","severity":1,"message":"501","line":79,"column":6,"nodeType":"392","endLine":79,"endColumn":8,"suggestions":"502"},{"ruleId":"390","severity":1,"message":"503","line":41,"column":5,"nodeType":"392","endLine":41,"endColumn":29,"suggestions":"504"},{"ruleId":"386","replacedBy":"505"},{"ruleId":"388","replacedBy":"506"},{"ruleId":"390","severity":1,"message":"496","line":30,"column":8,"nodeType":"392","endLine":30,"endColumn":14,"suggestions":"507"},"no-native-reassign",["508"],"no-negated-in-lhs",["509"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userCheck'. Either include it or remove the dependency array.","ArrayExpression",["510"],"React Hook useEffect has a missing dependency: 'roleBasedRedirect'. Either include it or remove the dependency array.",["511"],"no-unused-vars","'registerFormPhone' is assigned a value but never used.","Identifier","unusedVar",["512"],"React Hook useEffect has missing dependencies: 'activateAccount' and 'match.params.token'. Either include them or remove the dependency array.",["513"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["514"],"'createPaymentIntentFn' is defined but never used.","'useStripe' is defined but never used.","'name' is assigned a value but never used.","'clientSecretForPaymentIntent' is assigned a value but never used.","'setclientSecretForPaymentIntent' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserCartOnCheckout'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has a missing dependency: 'getUserInfo'. Either include it or remove the dependency array.",["516"],"React Hook useEffect has a missing dependency: 'getPaymentMethod'. Either include it or remove the dependency array.",["517"],"'res' is assigned a value but never used.","'res3' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'history.location.state' and 'roleBasedRedirect'. Either include them or remove the dependency array.",["518"],"React Hook useEffect has a missing dependency: 'getSubCategoryID'. Either include it or remove the dependency array.",["519"],"React Hook useEffect has a missing dependency: 'price'. Either include it or remove the dependency array.",["520"],"'useEffect' is defined but never used.","'useState' is defined but never used.",["521"],"React Hook useEffect has missing dependencies: 'match.params.token' and 'resetPassword'. Either include them or remove the dependency array.",["522"],["523"],"'MDBRow' is defined but never used.","'MDBCol' is defined but never used.","'MDBInput' is defined but never used.","'Image' is defined but never used.","'cart' is assigned a value but never used.","'slug' is assigned a value but never used.","'ratings' is assigned a value but never used.","'color' is assigned a value but never used.","'category' is assigned a value but never used.","'brand' is assigned a value but never used.","'relatedName' is assigned a value but never used.","'relatedDescription' is assigned a value but never used.","'relatedPrice' is assigned a value but never used.","'relatedAvailableQuantity' is assigned a value but never used.","'relatedSold' is assigned a value but never used.","'relatedImages' is assigned a value but never used.","'relatedRatings' is assigned a value but never used.","'relatedColor' is assigned a value but never used.","'relatedCategory' is assigned a value but never used.","'relatedSubCategories' is assigned a value but never used.","'relatedBrand' is assigned a value but never used.","'relatedShippingProvider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProduct'. Either include it or remove the dependency array.",["524"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["525"],"'navActive' is assigned a value but never used.","'setNavActive' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserOrder' and 'props.location'. Either include them or remove the dependency array.",["526"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'MDBIcon' is defined but never used.","'MDBCard' is defined but never used.","'ToastContainer' is defined but never used.","'Link' is defined but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'adminGetUserOrders'. Either include it or remove the dependency array.",["527"],"React Hook useEffect has a missing dependency: 'adminSearchOrderStatus'. Either include it or remove the dependency array.",["528"],"'setPromoCode' is assigned a value but never used.","'setDiscount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCartProductFromRedux' and 'user'. Either include them or remove the dependency array.",["529"],"'sold' is assigned a value but never used.","'images' is assigned a value but never used.","'setCurrentSelected' is assigned a value but never used.","'showCategory' is assigned a value but never used.",["530"],"'MDBBadge' is defined but never used.","React Hook useEffect has a missing dependency: 'adminCheck'. Either include it or remove the dependency array.",["531"],"React Hook useEffect has a missing dependency: 'getProducts'. Either include it or remove the dependency array.",["532"],["533"],"'StarRatings' is defined but never used.","'stripe_customer_id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'paymentIntent'. Either include it or remove the dependency array.",["534"],"React Hook useEffect has missing dependencies: 'elements' and 'isAddNewCardModalVisible'. Either include them or remove the dependency array.",["535"],["508"],["509"],["536"],"no-global-assign","no-unsafe-negation",{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"539","fix":"541"},{"desc":"542","fix":"543"},{"desc":"544","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"539","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"579","fix":"587"},"Update the dependencies array to be: [dispatch, userCheck]",{"range":"588","text":"589"},"Update the dependencies array to be: [roleBasedRedirect, user]",{"range":"590","text":"591"},{"range":"592","text":"591"},"Update the dependencies array to be: [activateAccount, match.params.token]",{"range":"593","text":"594"},"Update the dependencies array to be: [history, user]",{"range":"595","text":"596"},"Update the dependencies array to be: [getUserCartOnCheckout]",{"range":"597","text":"598"},"Update the dependencies array to be: [getUserInfo]",{"range":"599","text":"600"},"Update the dependencies array to be: [getPaymentMethod]",{"range":"601","text":"602"},"Update the dependencies array to be: [history.location.state, roleBasedRedirect, user]",{"range":"603","text":"604"},"Update the dependencies array to be: [getSubCategoryID, slug]",{"range":"605","text":"606"},"Update the dependencies array to be: [sortBy, subCategories, shippingProviders, price]",{"range":"607","text":"608"},{"range":"609","text":"591"},"Update the dependencies array to be: [match.params.token, resetPassword]",{"range":"610","text":"611"},"Update the dependencies array to be: [keyword, sortBy, subCategories, shippingProviders, price]",{"range":"612","text":"613"},"Update the dependencies array to be: [getProduct, match.params.slug]",{"range":"614","text":"615"},"Update the dependencies array to be: [getUserProfile, token]",{"range":"616","text":"617"},"Update the dependencies array to be: [getUserOrder, props.location, props.location.search]",{"range":"618","text":"619"},"Update the dependencies array to be: [searchOrderID, searchEmail, adminGetUserOrders]",{"range":"620","text":"621"},"Update the dependencies array to be: [searchOrderID, searchEmail, adminSearchOrderStatus]",{"range":"622","text":"623"},"Update the dependencies array to be: [getCartProductFromRedux, user]",{"range":"624","text":"625"},"Update the dependencies array to be: [getProduct]",{"range":"626","text":"627"},"Update the dependencies array to be: [adminCheck, user]",{"range":"628","text":"629"},"Update the dependencies array to be: [getProducts, page]",{"range":"630","text":"631"},"Update the dependencies array to be: [count, history]",{"range":"632","text":"633"},"Update the dependencies array to be: [paymentIntent]",{"range":"634","text":"635"},"Update the dependencies array to be: [elements, handleCancelForAddCard, isAddNewCardModalVisible]",{"range":"636","text":"637"},{"range":"638","text":"631"},[4773,4783],"[dispatch, userCheck]",[1068,1074],"[roleBasedRedirect, user]",[1372,1378],[1972,1974],"[activateAccount, match.params.token]",[722,728],"[history, user]",[7453,7455],"[getUserCartOnCheckout]",[7505,7507],"[getUserInfo]",[7564,7566],"[getPaymentMethod]",[2772,2778],"[history.location.state, roleBasedRedirect, user]",[1050,1056],"[getSubCategoryID, slug]",[1237,1279],"[sortBy, subCategories, shippingProviders, price]",[1088,1094],[1900,1902],"[match.params.token, resetPassword]",[1483,1534],"[keyword, sortBy, subCategories, shippingProviders, price]",[3387,3406],"[getProduct, match.params.slug]",[1420,1427],"[getUserProfile, token]",[2025,2048],"[getUserOrder, props.location, props.location.search]",[3193,3220],"[searchOrderID, searchEmail, adminGetUserOrders]",[3531,3558],"[searchOrderID, searchEmail, adminSearchOrderStatus]",[1535,1537],"[getCartProductFromRedux, user]",[7335,7337],"[getProduct]",[2261,2267],"[adminCheck, user]",[1069,1075],"[getProducts, page]",[610,617],"[count, history]",[3038,3040],"[paymentIntent]",[1480,1504],"[elements, handleCancelForAddCard, isAddNewCardModalVisible]",[1050,1056]]